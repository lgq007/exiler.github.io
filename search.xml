<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++中的引用</title>
    <url>/2023/07/15/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="C-中的引用"><a href="#C-中的引用" class="headerlink" title="C++中的引用"></a>C++中的引用</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​	C++是C语言的继承，它可进行过程化程序设计(面向过程)，也可以进行以继承和多态为特点的面向对象的程序设计。<strong>引用</strong> (reference)是C++对C语言的重要扩充，旨在使用一种更为安全和简洁的操作方式，弥补C语言指针(pointer)中的一些不足之处。</p>
<span id="more"></span>

<h2 id="引用的概念"><a href="#引用的概念" class="headerlink" title="引用的概念"></a>引用的概念</h2><p>​	引用就是为某一个变量(目标)起一个别名，类似于C语言结构体中用<code>typedef</code>命令为结构体起别名。也就是说它是某个已经存在的变量的另一个名字。对引用的操作与对变量名的操作可达到一样的效果。</p>
<h2 id="引用的初始化"><a href="#引用的初始化" class="headerlink" title="引用的初始化"></a>引用的初始化</h2><p>​	变量类型标识符 &amp;引用名&#x3D; 目标变量名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure>

<p>  上述步骤即完成了对变量a的引用，需要注意的是，<code>&amp;</code>并不是C语言中的取地址操作符，而是起到标识作用，标识所定义的变量是一个引用，引用的声明完成之后，目标变量便有了两个名称，同时指向相同的一块内存地址。</p>
<h2 id="定义引用的注意事项"><a href="#定义引用的注意事项" class="headerlink" title="定义引用的注意事项"></a>定义引用的注意事项</h2><ul>
<li>引用在定义时必须初始化，必须要有指向的对象。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b;</span><br><span class="line"> b = a;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[Error] &#x27;b&#x27; declared as reference but not initialized</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引用在初始化时只能绑定左值，不能绑定临时对象、表达式结果和字面常量。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = x;</span><br><span class="line">ref = <span class="number">10</span>;   <span class="comment">// 修改 x 的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> y = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = y;</span><br><span class="line"><span class="type">int</span> z = ref; <span class="comment">// 可通过间接引用访问 const 限定的变量的值</span></span><br><span class="line">ref = <span class="number">10</span>; <span class="comment">// 错误，不能通过引用修改 const 限定的变量的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getElement</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = <span class="built_in">getElement</span>(<span class="number">2</span>); <span class="comment">// 引用函数返回的左值引用</span></span><br><span class="line">ref = <span class="number">10</span>; <span class="comment">// 修改数组元素的值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>&amp; ref = <span class="number">5</span>;  <span class="comment">// 错误，不能引用字面常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = x + y; <span class="comment">// 错误，不能引用表达式结果</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> z = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = z;  <span class="comment">// 错误，不能直接引用 const 限定的变量的值。</span></span><br></pre></td></tr></table></figure>



<p>这里要注意const左值与右值的区别:</p>
<p>const 左值和 const 右值都是指被声明为 const 的值，至于怎么辨别左右值，主要看此时const限定的变量所起到的作用，它们之间的关系是：</p>
<ul>
<li>const 左值：const 左值是指被声明为 const 的左值，即不可修改的左值。它可以通过引用来访问，但不能通过引用来修改。例如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = x; <span class="comment">// 引用 const 左值</span></span><br><span class="line"><span class="type">int</span> y = ref; <span class="comment">// 通过引用访问 const 左值</span></span><br><span class="line">ref = <span class="number">10</span>; <span class="comment">// 错误，不能通过引用修改 const 左值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>const 右值：const 右值是指被声明为 const 的右值，即不可修改的右值。它不能被引用，因为引用只能绑定到可修改的左值。例如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> y = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = y; <span class="comment">// 错误，不能引用 const 右值</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，const 右值和 const 左值都是不可修改的，但它们的区别在于 const 左值可以通过引用访问和修改，而 const 右值不能被引用。</p>
<h2 id="引用与指针的区别"><a href="#引用与指针的区别" class="headerlink" title="引用与指针的区别"></a>引用与指针的区别</h2><ol>
<li>定义和初始化：指针需要通过使用星号(*)来声明和初始化，而引用则使用&amp;符号来声明和初始化。例如：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* ptr = &amp;x; <span class="comment">// 指针的定义和初始化</span></span><br><span class="line"><span class="type">int</span>&amp; ref = x; <span class="comment">// 引用的定义和初始化</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>空值：指针可以被赋予空值（nullptr），表示指向空地址或无效地址。而引用必须在声明时初始化，并且不能为空。例如：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="literal">nullptr</span>; <span class="comment">// 指针赋予空值</span></span><br><span class="line"><span class="comment">// int&amp; ref; // 错误，引用必须在声明时初始化</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可修改性：指针可以重新指向其他地址，也可以修改所指向的值。而引用在初始化后不能改变绑定的对象，只能通过引用来修改所绑定的对象的值。例如：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* ptr = &amp;x;</span><br><span class="line">ptr = &amp;y; <span class="comment">// 指针重新指向另一个地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = x;</span><br><span class="line"><span class="comment">// ref = &amp;y; // 错误，引用不能重新绑定到另一个对象</span></span><br><span class="line">ref = y; <span class="comment">// 通过引用修改绑定对象的值</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>空间和操作：指针占用一定的内存空间，用于存储地址信息，而引用不占用额外的内存空间，它只是变量的别名。指针可以进行指针运算和解引用操作，而引用不需要进行这些操作，它可以直接使用原始变量的操作符。例如：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* ptr = &amp;x;</span><br><span class="line"><span class="type">int</span>&amp; ref = x;</span><br><span class="line"></span><br><span class="line">*ptr = <span class="number">10</span>; <span class="comment">// 指针解引用并修改所指向的值</span></span><br><span class="line">ref = <span class="number">15</span>; <span class="comment">// 直接通过引用修改绑定对象的值</span></span><br></pre></td></tr></table></figure>

<p>总结起来，指针和引用都是用于间接访问和操作变量的机制，但它们在定义和初始化、空值、可修改性以及空间和操作上有所不同。选择使用指针还是引用取决于具体的需求和使用场景。</p>
<h2 id="引用的应用"><a href="#引用的应用" class="headerlink" title="引用的应用"></a>引用的应用</h2><p>引用的主要应用就是把它作为函数参数，以扩厂函数传递数据的功能，引用作函数参数时是区别于值传递与地址传递的引用传递。</p>
<p>利用引用传递可以克服值传递与地址传递中容易出现错误且可读性差的缺点，可直接操作变量，简单高效且可读性高。</p>
<h3 id="函数参数传递："><a href="#函数参数传递：" class="headerlink" title="函数参数传递："></a>函数参数传递：</h3><p>引用可以用作函数的参数，可以通过引用传递变量，以便在函数内部修改原始变量的值。这样可以避免复制大型对象的开销，并且可以实现对变量的直接修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">increment</span>(x); <span class="comment">// 通过引用传递参数</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl; <span class="comment">// 输出 6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回值优化："><a href="#返回值优化：" class="headerlink" title="返回值优化："></a>返回值优化：</h3><p>函数可以返回引用类型，以便返回对变量的引用，而不是复制变量的值。这样可以避免复制大型对象的开销，并且可以实现对返回值的直接修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getMax</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>&amp; maxRef = <span class="built_in">getMax</span>(x, y); <span class="comment">// 返回引用</span></span><br><span class="line">    maxRef = <span class="number">15</span>; <span class="comment">// 修改返回的引用</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl; <span class="comment">// 输出 15</span></span><br><span class="line">    cout &lt;&lt; y &lt;&lt; endl; <span class="comment">// 输出 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历容器："><a href="#遍历容器：" class="headerlink" title="遍历容器："></a>遍历容器：</h3><p>引用可以用于遍历容器，通过引用来获取容器中的元素，以便对元素进行修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>&amp; num : nums) &#123;</span><br><span class="line">    num *= <span class="number">2</span>; <span class="comment">// 修改容器中的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 入门-1</title>
    <url>/2023/08/03/C++%20%E5%85%A5%E9%97%A8-1/</url>
    <content><![CDATA[<h1 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h1><blockquote>
<p>不同的编译器和平台可能会有差异,下表为在Windows_X64环境下使用MinGw GCC 9.2.0 32_bit为例:</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">含义</th>
<th align="center">最小尺寸</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bool</td>
<td align="center">布尔类型</td>
<td align="center">8bits</td>
<td align="center">true或false</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">字符型</td>
<td align="center">8bits</td>
<td align="center">-2^7 ~ 2^7-1</td>
</tr>
<tr>
<td align="center">wchar_t</td>
<td align="center">宽字符</td>
<td align="center">16bits</td>
<td align="center">0 ~ 2^16 - 1</td>
</tr>
<tr>
<td align="center">char16_t</td>
<td align="center">Unicode字符</td>
<td align="center">16bits</td>
<td align="center">0 ~ 2^16 - 1</td>
</tr>
<tr>
<td align="center">char32_t</td>
<td align="center">Unicode字符</td>
<td align="center">32bits</td>
<td align="center">0 ~ 2^32 - 1</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">短整型</td>
<td align="center">16bits</td>
<td align="center">-2^15 ~ 2^15-1</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整型</td>
<td align="center">32bits</td>
<td align="center">-2^31 ~ 2^31-1</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">长整型</td>
<td align="center">32bits</td>
<td align="center">-2^31 ~ 2^31-1</td>
</tr>
<tr>
<td align="center">long long</td>
<td align="center">长整型</td>
<td align="center">64bits</td>
<td align="center">-2^63 ~ 2^63-1</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">单精度浮点型</td>
<td align="center">32bits</td>
<td align="center">大约7位有效数字</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">双精度浮点型</td>
<td align="center">64bits</td>
<td align="center">大约15位有效数字</td>
</tr>
<tr>
<td align="center">long double</td>
<td align="center">扩展精度浮点型</td>
<td align="center">96bits</td>
<td align="center">更高的有效数字</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>可以在IDE中编译运行以下代码查看本机算数类型的尺寸</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Windows_X64环境下MinGw GCC 9.2.0 32_bit为例</span></span><br><span class="line"><span class="comment">// 1Byte = 8bit</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;int * &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span>*)*<span class="number">8</span>&lt;&lt;endl; <span class="comment">// 32 bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;bool &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">bool</span>)*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 8 bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;char &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 8bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;wchar_t &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">wchar_t</span>)*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 16bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;char16_t &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">char16_t</span> )*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 16bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;char32_t &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">char32_t</span> )*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 32bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;short &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">short</span> )*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 16bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;int &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span> )*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 32bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;long &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">long</span> )*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 32bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;long long&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>)*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 64bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;float &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">float</span>)*<span class="number">8</span>&lt;&lt;endl;  <span class="comment">// 32bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;double &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">double</span>)*<span class="number">8</span>&lt;&lt;endl; <span class="comment">// 64bits</span></span><br><span class="line">  cout&lt;&lt; <span class="string">&quot;long double &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">double</span>)*<span class="number">8</span>&lt;&lt;endl; <span class="comment">//96bits</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内置类型的机器实现"><a href="#内置类型的机器实现" class="headerlink" title="内置类型的机器实现"></a>内置类型的机器实现</h2><p>字节(Byte)是可寻址的最小内存块，1 byte &#x3D; 8 bit(比特) </p>
<p>字(Word)是存储的基本单元，1 Word &#x3D; 4字节或8字节</p>
<p>内存中每个字节与⼀个数字（被称为地址address）关联，我们能够使用某个地址来表示从这个地址开始的大小不同的比特串，如地址为736424的那个字或者地址736424的那个字节。但是必须知道存储在某地址的数据类型，才能赋予内存该地址明确含义，类型决定数据所占比特数，以及如何解释这些比特的内容。</p>
<h2 id="带符号型和无符号型"><a href="#带符号型和无符号型" class="headerlink" title="带符号型和无符号型"></a>带符号型和无符号型</h2><p>其它整型 </p>
<ul>
<li><p>除去布尔型和扩展字符型外，其它整型可划分为带符号的和无符号的 </p>
</li>
<li><p>int, short, long, long long 带符号 </p>
</li>
<li><p>类型名前添加<code>unsigned </code>得到无符号类型 </p>
</li>
<li><p>如<code>unsigned long</code></p>
</li>
<li><p>unsigned int可简写为 unsigned)</p>
</li>
</ul>
<p>字符型 </p>
<ul>
<li><p>分三种 char, signed char, unsigned char </p>
</li>
<li><p>char 表现为带符号还是无符号的，由编译器决定</p>
</li>
</ul>
<h3 id="如何选择类型"><a href="#如何选择类型" class="headerlink" title="如何选择类型"></a>如何选择类型</h3><ol>
<li>数值不可能是负数时，比如年龄，长度等等，选用<code>无符号类型</code>；</li>
<li>整数计算式使用<code>int</code>类型，一般<code>long</code>的大小和<code>int</code>一样，而<code>short</code>显得太小。如果处理较大的整数，应该选择<code>long long</code>；</li>
<li>算数表达式中不要使用<code>bool</code>或<code>char</code>，符号容易出问题；</li>
<li>浮点数据运算使用<code>double</code>；</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类型所能表示值的范围决定转换过程： </p>
<ul>
<li>非布尔型赋给布尔型，初始值为0则结果为false， 否则为true。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">	<span class="keyword">if</span> (i) &#123;</span><br><span class="line">		i = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;  <span class="comment">// i=0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>布尔型赋给非布尔型，初始值为false结果为0，初始值为true结果为1。 </li>
<li>浮点数赋给整型，近似处理，保留小数点前的部分。</li>
<li>整型赋给浮点型，小数部分记0，若整型超过浮点型容量则精度可能有损失。</li>
<li>超出范围值赋给无符号数，结果是初始值对无符号类型表示的最大值取模余数。 </li>
<li>超出范围值赋给有符号数，结果未定义。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test01.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">	<span class="keyword">if</span> (i) &#123;</span><br><span class="line">		i = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; endl;  <span class="comment">// i=0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test02.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> u = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">-42</span>;</span><br><span class="line">	std::cout &lt;&lt; i + i &lt;&lt; std::endl; <span class="comment">//-84</span></span><br><span class="line">	std::cout &lt;&lt; u + i &lt;&lt; std::endl; <span class="comment">//4294967264</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test03.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//正常输出</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test04.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> u = <span class="number">10</span>; u &gt;= <span class="number">0</span>; --u) &#123;   <span class="comment">//无符号数不会小于0</span></span><br><span class="line">		std::cout &lt;&lt; u &lt;&lt; std::endl;    <span class="comment">//死循环，ctrl+c退出</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test05.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> u = <span class="number">10</span>, u2 = <span class="number">42</span>;</span><br><span class="line">	std::cout &lt;&lt; u2 - u &lt;&lt; std::endl;  <span class="comment">//32</span></span><br><span class="line">	std::cout &lt;&lt; u - u2 &lt;&lt; std::endl;  <span class="comment">//4294967264</span></span><br><span class="line">	<span class="type">int</span> i = <span class="number">10</span>, i2 = <span class="number">42</span>;</span><br><span class="line">	std::cout &lt;&lt; i2 - i &lt;&lt; std::endl;  <span class="comment">//32</span></span><br><span class="line">	std::cout &lt;&lt; i - i2 &lt;&lt; std::endl;  <span class="comment">//-32</span></span><br><span class="line">	std::cout &lt;&lt; i - u &lt;&lt; std::endl;  <span class="comment">//0</span></span><br><span class="line">	std::cout &lt;&lt; u - i &lt;&lt; std::endl; <span class="comment">//0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字面值常量-Literal-Constants"><a href="#字面值常量-Literal-Constants" class="headerlink" title="字面值常量(Literal Constants)"></a>字面值常量(Literal Constants)</h1><ol>
<li><strong>整型字面值常量:</strong></li>
</ol>
<ul>
<li>十进制 ：42</li>
<li>八进制: 052 (以0开头)</li>
<li>十六进制: 0x2A 或 0X2A (以 0x 或 0X 开头)</li>
<li>二进制: <code>0b101010</code> 或 <code>0B101010</code>（以 0b 或 0B 开头）</li>
</ul>
<p>错误示范:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> month = <span class="number">9</span>, day = <span class="number">7</span>;</span><br><span class="line">	<span class="type">int</span> month1 = <span class="number">09</span>, day1 = <span class="number">07</span>; <span class="comment">//以0开头会当成8进制赋值</span></span><br><span class="line">    <span class="comment">// [Error] invalid digit &quot;9&quot; in octal constant</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>浮点型字面值常量</strong>:</li>
</ol>
<ul>
<li>十进制：<code>3.14</code> 或 <code>2.0</code></li>
<li>科学计数法：<code>3.0e8</code>（表示 3.0 乘以 10 的 8 次方）</li>
</ul>
<ol start="3">
<li><strong>字符型字面值常量</strong>:</li>
</ol>
<ul>
<li>字符：<code>&#39;A&#39;</code> 或 <code>&#39;x&#39;</code></li>
<li>转义字符：<code>&#39;\n&#39;</code>（表示换行符）或 <code>&#39;\\&#39;</code>（表示反斜杠）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转义序列:</span><br><span class="line">换行&#x27;\n&#x27;   横向制表符&#x27;\t&#x27;   响铃&#x27;\a&#x27;</span><br><span class="line">纵向制表符&#x27;\v&#x27;  退格符&#x27;\b&#x27;  双引号&#x27;\&quot;&#x27;</span><br><span class="line">反斜线&#x27;\\&#x27;  问号&#x27;\?&#x27;  单引号&#x27;\&#x27;&#x27;   回车&#x27;\r&#x27; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">泛化转义序列:&#x27;\x&#x27;跟1个多个16进制数，或&#x27;\&#x27;后跟1、2、3个8进制数</span><br><span class="line">&#x27;\7&#x27;响铃 &#x27;\12&#x27;换⾏ &#x27;\40&#x27;空格</span><br><span class="line">&#x27;\0&#x27;空字符 &#x27;\115&#x27;字符M &#x27;\x4d&#x27;字符M</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test05.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">//换行</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\tHi!\n&quot;</span>;  <span class="comment">//制表符,Hi!,换行</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\v\?\abc\b\n&quot;</span>;  <span class="comment">//纵向制表符,?,响铃,bc,退格,换行</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Hi \x4dO\115!\n&quot;</span>;  <span class="comment">//Hi MOM!,换行</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&#x27;\115&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">//M,换行</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><strong>字符串字面值常量</strong>：字符串字面值常量表示一串字符，使用双引号括起来。例如：</li>
</ol>
<ul>
<li>字符串：<code>&quot;Hello, World!&quot;</code></li>
</ul>
<blockquote>
<p>字符串实际类型是字符数组，结尾添加’\0’字符 字符串型实际上是常量字符构成的数组， 结尾处以’\0’结束，所以字符串类型实际 上长度比内容多1。</p>
</blockquote>
<ol start="5">
<li><p><strong>布尔字面值常量</strong>：布尔字面值常量表示真或假，可以是 <code>true</code> 或 <code>false</code>。</p>
</li>
<li><p><strong>指针字面值:</strong> nullptr</p>
</li>
<li><p><strong>指定字面值类型:</strong></p>
</li>
</ol>
<p>字符和字符串字面值:</p>
<table>
<thead>
<tr>
<th align="center">前缀</th>
<th align="center">含义</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">u</td>
<td align="center">Unicode16字符</td>
<td align="center">char16_t</td>
</tr>
<tr>
<td align="center">U</td>
<td align="center">Unicode32字符</td>
<td align="center">char32_t</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">宽字符</td>
<td align="center">wchar_t</td>
</tr>
<tr>
<td align="center">u8</td>
<td align="center">UTF-8(字符串字⾯常量)</td>
<td align="center">char</td>
</tr>
</tbody></table>
<p>整型字面值:</p>
<table>
<thead>
<tr>
<th align="center">后缀</th>
<th align="center">最小匹配类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">u or U</td>
<td align="center">unsigned</td>
</tr>
<tr>
<td align="center">l or L</td>
<td align="center">long</td>
</tr>
<tr>
<td align="center">ll or LL</td>
<td align="center">long long</td>
</tr>
</tbody></table>
<p>浮点型字面值:</p>
<table>
<thead>
<tr>
<th align="center">后缀</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">f or F</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">l or L</td>
<td align="center">long double</td>
</tr>
</tbody></table>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><blockquote>
<p>变量提供⼀个具名的、可供程序操作的存储空间。 C++中变量和对象⼀般可以互换使用</p>
</blockquote>
<h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><ul>
<li><p>定义形式：类型说明符（type specifier） + ⼀个或多个变量名组成的列表;</p>
</li>
<li><p>初始化（initialize）：对象在创建时获得了⼀个特定的值。</p>
</li>
<li><ul>
<li>初始化不是赋值 ，初始化 &#x3D; 创建变量 + 赋予初始值 ，赋值 &#x3D; 擦除对象的当前值 + 用新值代替</li>
</ul>
</li>
<li><p>列表初始化：使用花括号{} </p>
</li>
<li><p>若列表初始化且初始值存在丢失信息的风险，则编译器将报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a&#123;3.14&#125;;</span><br><span class="line"></span><br><span class="line">// error: narrowing conversion from ‘double’ to ‘int’ </span><br></pre></td></tr></table></figure>
</li>
<li><p>默认初始化：定义时没有指定初始值会被默认初始化； </p>
</li>
<li><p>在函数体内部的内置类型变量将不会被初始化。 </p>
</li>
<li><p>类的对象如果没有显⽰初始化，其值由类定义。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">std::string global_str;  <span class="comment">//定义全局变量global_str,初值为空字符串</span></span><br><span class="line"><span class="type">int</span> global_int;  <span class="comment">//定义全局变量global_int,初值为0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> local_int; <span class="comment">//局部变量未初始化，初值未定义</span></span><br><span class="line">	std::string local_str; </span><br><span class="line">    <span class="comment">//local_str 是 string类的对象，它的值由类确定，为空字符串。</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>建议初始化每⼀个内置类型变量！</strong></p>
<h2 id="变量声明与定义的联系"><a href="#变量声明与定义的联系" class="headerlink" title="变量声明与定义的联系"></a>变量声明与定义的联系</h2><p>把程序拆分成多个逻辑部分来编写 ，C++支持<strong>分离式编译机制</strong>，程序分割为若干文件，每个文件可被独立编译，为了支持分离式编译，C++将声明和定义区分开。</p>
<p>声明使得名字为程序所知，定义负责创建与名字关联的实体。 </p>
<p>声明规定了变量类型和名字。定义申请存储空间，也可能为变量赋初值。想声明⼀个变量而非定义它，在变量名前加关键字<code>extern</code>,不要显示初始化变量。</p>
<p>变量只能被定义⼀次，但是可以多次声明,定义只出现在⼀个文件中，其他文件使用该变量时需要对其声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;  <span class="comment">//声明i而非定义 </span></span><br><span class="line"><span class="type">int</span> j;  <span class="comment">//声明并定义j </span></span><br><span class="line"><span class="comment">// 包含了显示初始化的声明，就变成了定义：</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">double</span> pi = <span class="number">3.14</span>;  <span class="comment">//定义</span></span><br><span class="line"><span class="comment">// 函数体内部，试图初始化⼀个extern关键字标记的变量，将引发错误。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> ix = <span class="number">1024</span>; <span class="comment">//定义</span></span><br><span class="line"><span class="type">int</span> iy;  <span class="comment">//定义</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> iz;  <span class="comment">//声明</span></span><br></pre></td></tr></table></figure>

<h2 id="变量标识符与命名规范"><a href="#变量标识符与命名规范" class="headerlink" title="变量标识符与命名规范"></a>变量标识符与命名规范</h2><p>标识符:</p>
<ol>
<li>由字母、数字、下划线组成，必须以字母或下划线开头。</li>
</ol>
<ul>
<li><p>长度没有限制。 </p>
</li>
<li><p>大小写写敏感。</p>
</li>
</ul>
<ol start="2">
<li><p>保留名字不能用做标识符。</p>
</li>
<li><p>用户自定义标识符</p>
</li>
</ol>
<ul>
<li>不能连续出现两个下划线</li>
<li>不能以下划线紧跟大写字母开头</li>
<li>定义在函数体外的标识符不能以下划线开头</li>
<li>使用小驼峰命名法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c++关键字</span></span><br><span class="line"><span class="keyword">alignas</span>  <span class="keyword">continue</span>  <span class="keyword">friend</span>  <span class="keyword">register</span>  <span class="literal">true</span></span><br><span class="line"><span class="keyword">alignof</span>  <span class="keyword">decltype</span>  <span class="keyword">goto</span>  <span class="keyword">reinterpret_cast</span>  <span class="keyword">try</span></span><br><span class="line"><span class="keyword">asm</span>  <span class="keyword">default</span>  <span class="keyword">if</span>  <span class="keyword">return</span>  <span class="keyword">typedef</span></span><br><span class="line"><span class="keyword">auto</span>  <span class="keyword">delete</span>  <span class="keyword">inline</span>  <span class="type">short</span>  <span class="keyword">typeid</span></span><br><span class="line"><span class="type">bool</span>  <span class="keyword">do</span>  <span class="type">int</span>  <span class="type">signed</span>  <span class="keyword">typename</span></span><br><span class="line"><span class="keyword">break</span>  <span class="type">double</span>  <span class="type">long</span>  <span class="keyword">sizeof</span>  <span class="keyword">union</span></span><br><span class="line"><span class="keyword">case</span>  <span class="keyword">dynamic_cast</span>  <span class="keyword">mutable</span>  <span class="type">static</span>  <span class="type">unsigned</span></span><br><span class="line"><span class="keyword">catch</span>  <span class="keyword">else</span>  <span class="keyword">namespace</span>  <span class="keyword">static_assert</span>  <span class="keyword">using</span></span><br><span class="line"><span class="type">char</span>  <span class="keyword">enum</span>  <span class="keyword">new</span>  <span class="keyword">static_cast</span>  <span class="keyword">virtual</span></span><br><span class="line"><span class="type">char16_t</span> <span class="keyword">explicit</span>  <span class="keyword">noexcept</span>  <span class="keyword">struct</span>  <span class="type">void</span></span><br><span class="line"><span class="type">char16_t</span> <span class="keyword">export</span>  <span class="literal">nullptr</span>  <span class="keyword">switch</span>  <span class="keyword">volatile</span></span><br><span class="line"><span class="keyword">class</span>  <span class="keyword">extern</span>  <span class="keyword">operator</span>  <span class="keyword">template</span>  <span class="type">wchar_t</span></span><br><span class="line"><span class="type">const</span>  <span class="literal">false</span>  <span class="keyword">private</span>  <span class="keyword">this</span>  <span class="keyword">while</span></span><br><span class="line"><span class="keyword">constexpr</span>  <span class="type">float</span>  <span class="keyword">protected</span>  <span class="keyword">thread_local</span></span><br><span class="line"><span class="keyword">const_cast</span>  <span class="keyword">for</span>  <span class="keyword">public</span>  <span class="keyword">throw</span></span><br><span class="line"><span class="comment">//c++操作符替代名</span></span><br><span class="line"><span class="keyword">and</span>  <span class="keyword">bitand</span>  <span class="keyword">compl</span>  <span class="keyword">not_eq</span>  <span class="keyword">or_eq</span>  <span class="keyword">xor_eq</span></span><br><span class="line"><span class="keyword">and_eq</span>  <span class="keyword">bitor</span>  <span class="keyword">not</span>  <span class="keyword">or</span>  <span class="keyword">xor</span></span><br></pre></td></tr></table></figure>

<p>命名规范:</p>
<ol>
<li>体现实际含义</li>
<li>变量名和函数名使用小驼峰命名法，如<code>myVariable</code></li>
<li>自定义类名大写字母开头，如<code>Sales_item</code></li>
<li>若标识符有多个单词组成，单词之间要有明显区分，如<code>student_loan</code>,<code>studentLoan</code>,不要用<code>studentloan</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">double</span> = <span class="number">3.14</span>;  <span class="comment">//error</span></span><br><span class="line"><span class="type">int</span> _;</span><br><span class="line"><span class="type">int</span> <span class="keyword">catch</span><span class="number">-22</span>;  <span class="comment">//error</span></span><br><span class="line"><span class="type">int</span> <span class="number">1</span>_or_2 = <span class="number">1</span>;  <span class="comment">//error</span></span><br><span class="line"><span class="type">double</span> Double = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>

<p>名字的作用域（namescope），以{}分隔</p>
<ul>
<li>全局作用域</li>
<li>块作用域</li>
</ul>
<p>第⼀次使用变量时再定义它， 更容易找到，赋予比较合理的初始值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scope.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// Program for illustration purposes only: It is bad style for a function</span></span><br><span class="line"><span class="comment">// to use a global variable and also define a local variable with the same</span></span><br><span class="line"><span class="type">int</span> reused = <span class="number">42</span>; <span class="comment">// reused has global scope</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> unique = <span class="number">0</span>; <span class="comment">// unique has block scope</span></span><br><span class="line"><span class="comment">// output #1: uses global reused; prints 42 0</span></span><br><span class="line">	std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">	<span class="type">int</span> reused = <span class="number">0</span>; <span class="comment">// new, local object named reused hides global reused</span></span><br><span class="line"><span class="comment">// output #2: uses local reused; prints 0 0</span></span><br><span class="line">	std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl; </span><br><span class="line">    <span class="comment">//此时全局变量被同名的局部变量覆盖</span></span><br><span class="line"><span class="comment">// output #3: explicitly requests the global reused; prints 42 0</span></span><br><span class="line">	std::cout &lt;&lt; ::reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;  </span><br><span class="line">    <span class="comment">//使用全局变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嵌套的作用域:</p>
<p>同时存在全局和局部变量时,已定义局部变量的作用域中可用<code>::</code>显式访问全局变量。用到全局变量时，尽量不使用重名的局部变量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> j = i;</span><br><span class="line"><span class="comment">//j的值是100，局部变量i覆盖了全局变量i</span></span><br><span class="line">	std::cout &lt;&lt; j &lt;&lt; std::endl; <span class="comment">//100</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//下面的程序合法吗？如果合法，它将输出什么？</span></span><br><span class="line">	<span class="type">int</span> i = <span class="number">100</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">		sum += i;  <span class="comment">//此时的变量i仅在for循环内生效</span></span><br><span class="line">	std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//合法输出:100 45 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><ul>
<li><p>左值（l-value）可以出现在赋值语句的左边或者右边，比如变量； </p>
</li>
<li><p>右值（r-value）只能出现在赋值语句的右边，比如常量。</p>
</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>⼀般说的引用是指的左值引用 </p>
</blockquote>
<p>引用：引用是为对象起了另外⼀个名字，引用类型:引用（refer to）另外⼀种类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;refVal = val; </span><br></pre></td></tr></table></figure>

<ol>
<li>引用必须初始化:</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;refVal2;  <span class="comment">//报错，引用必须被初始化 </span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引用和它的初始值是<strong>绑定bind</strong>在⼀起的，而不是拷贝。⼀旦定义就不能更改绑定为其他的对象 </li>
<li>引用类型要与绑定对象匹配</li>
<li>引用只能绑定在对象上，不能与字面值或表达式计算结果绑定</li>
</ol>
<p>更详细的解释可参考：<a href="https://lgq007.github.io/2023/07/15/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/">C++中的引用</a></p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote>
<p>是⼀种 “指向（point to）”另外⼀种类型的复合类型。 本身就是⼀个对象，无需定义时赋值</p>
</blockquote>
<h3 id="定义指针类型"><a href="#定义指针类型" class="headerlink" title="定义指针类型"></a>定义指针类型</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ip1,*ip2;</span><br><span class="line"><span class="comment">//ip1和ip2都是int型对象指针</span></span><br><span class="line"><span class="type">double</span> dp,*dp2</span><br><span class="line"><span class="comment">//dp2 是指向double型对象的指针，dp是double类型</span></span><br></pre></td></tr></table></figure>

<h3 id="获取对象的地址"><a href="#获取对象的地址" class="headerlink" title="获取对象的地址"></a>获取对象的地址</h3><p>指针存放某个对象的地址。 获取对象的地址： </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i; </span><br></pre></td></tr></table></figure>

<p><code>&amp;</code>是取地址符。 <strong>指针的类型与所指向的对象类型必须⼀致</strong>（均为同一类型int、double等）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival; <span class="comment">//p存放ival的地址，p是指向val的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> dval;</span><br><span class="line"><span class="type">double</span> *pd = &amp;dval;<span class="comment">//正确</span></span><br><span class="line"><span class="type">double</span> *pd2 = pd;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *pi = pd;<span class="comment">//错误，类型不匹配</span></span><br><span class="line">pi = &amp;dval;<span class="comment">//错误，试图把double对象的地址赋给int指针</span></span><br></pre></td></tr></table></figure>

<p>指针的值(即地址)的四种状态： </p>
<ol>
<li>指向⼀个对象； </li>
<li>指向紧邻对象的下⼀个位置； </li>
<li>空指针； </li>
<li>无效指针。</li>
</ol>
<p>对无效指针的操作均会引发错误; </p>
<p>第二种和第三种虽为有效的，访问指针对象的行为后果无法预计。</p>
<h3 id="指针访问对象"><a href="#指针访问对象" class="headerlink" title="指针访问对象"></a>指针访问对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果指针指向一个对象，使用解引用符（操作符&#x27;*&#x27;）来访问对象</span></span><br><span class="line">	<span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line">	<span class="type">int</span> *p = &amp;ival;</span><br><span class="line">	std::cout &lt;&lt; *p;<span class="comment">// 输出p指针所指对象的数据，</span></span><br><span class="line">	*p = <span class="number">0</span>;</span><br><span class="line">	std::cout &lt;&lt; ival; <span class="comment">// 0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解引用操作仅适用于确实指向某个对象的有效指针。</p>
<h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1=<span class="literal">nullptr</span>; <span class="comment">//使用空指针。</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="number">0</span>;<span class="comment">//p2 初始化为字面常量0</span></span><br><span class="line"><span class="comment">// include&lt;cstdlib&gt;</span></span><br><span class="line"><span class="type">int</span> *p3 = <span class="literal">NULL</span>;<span class="comment">//int *p3=0 NULL预处理变量</span></span><br><span class="line"><span class="type">int</span> zero = <span class="number">0</span>;</span><br><span class="line">p1 = zero; <span class="comment">//错误，不能把int变量直接赋给指针</span></span><br></pre></td></tr></table></figure>

<p><strong>建议初始化所有指针！</strong></p>
<h3 id="指针与引用的区别"><a href="#指针与引用的区别" class="headerlink" title="指针与引用的区别"></a>指针与引用的区别</h3><ul>
<li>引用本身并非⼀个对象，引用定义后就不能绑定到其他的对象上了； </li>
<li>指针并没有此限制</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//说明指针和引用的主要区别</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//引用是另⼀个对象的别名，而指针本身就是⼀个对象。</span></span><br><span class="line"><span class="comment">//引用必须初始化，并且⼀旦定义了引用就无法再绑定到其他对象。</span></span><br><span class="line"><span class="comment">//而指针无须在定义时赋初值，也可以重新赋值让其指向其他对象。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *pi = <span class="number">0</span>;<span class="comment">//pi 初始化，没有指向任何对象</span></span><br><span class="line"><span class="type">int</span> *pi2 = &amp;i;<span class="comment">//pi2指向i</span></span><br><span class="line"><span class="type">int</span> *pi3;<span class="comment">//如果pi3定于于块内，pi3值无法确定</span></span><br><span class="line"></span><br><span class="line">pi3 = pi2;<span class="comment">//pi3与pi2指向同⼀对象i</span></span><br><span class="line">pi2 = <span class="number">0</span>;<span class="comment">//pi2 不指向任何对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值语句永远改变的是左侧的对象。</span></span><br><span class="line">pi = &amp;ival;<span class="comment">//pi指向了ival</span></span><br><span class="line">*pi = <span class="number">0</span>;<span class="comment">//ival值改变，pi没改变</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请解释下述定义。在这些定义中有非法的吗？如果有，为什么？</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">(a) <span class="type">double</span>* dp = &amp;i;</span><br><span class="line">(b) <span class="type">int</span> *ip = i;</span><br><span class="line">(c) <span class="type">int</span> *p = &amp;i;</span><br><span class="line">(a): ⾮法。不能将⼀个指向 <span class="type">double</span> 的指针指向 <span class="type">int</span> 。</span><br><span class="line">(b): ⾮法。不能将 <span class="type">int</span> 变量赋给指针。</span><br><span class="line">(c): 合法。</span><br></pre></td></tr></table></figure>



<h3 id="其他指针操作"><a href="#其他指针操作" class="headerlink" title="其他指针操作"></a>其他指针操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p2=&amp;ival;</span><br><span class="line"><span class="comment">//指针值0，条件取false</span></span><br><span class="line"><span class="keyword">if</span>(p1)</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"><span class="comment">//p2指针⾮0，条件值是true</span></span><br><span class="line"><span class="keyword">if</span>(p2)</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"><span class="comment">//指针⽐较</span></span><br><span class="line"><span class="keyword">if</span>(p1==p2)</span><br><span class="line">	<span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p><strong>非法指针会引发不可预计的后果!</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//⼀条语句定义不同类型变量</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1024</span>,</span><br><span class="line">*p=&amp;i,&amp;r=i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;<span class="comment">//合法但容易产⽣误导</span></span><br><span class="line"><span class="type">int</span>* p1,p2;<span class="comment">//p1是指针,p2是int</span></span><br><span class="line"><span class="type">int</span> *p1,*p2;<span class="comment">//p1,p2都是指针</span></span><br><span class="line">或</span><br><span class="line"><span class="type">int</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br></pre></td></tr></table></figure>



<h4 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line">	<span class="type">int</span> *pi = &amp;ival;  <span class="comment">//pi指向int型</span></span><br><span class="line">	<span class="type">int</span> **ppi = &amp;pi; <span class="comment">//ppi指向int型指针</span></span><br><span class="line"><span class="comment">// 解引用</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The value of ival\n&quot;</span>  </span><br><span class="line">	     &lt;&lt; <span class="string">&quot;direct value: &quot;</span> &lt;&lt; ival &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">	     &lt;&lt; <span class="string">&quot;indirect value: &quot;</span> &lt;&lt; *pi &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">	     &lt;&lt; <span class="string">&quot;doubly indirect value: &quot;</span> &lt;&lt; **ppi</span><br><span class="line">	     &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//The value of ival</span></span><br><span class="line">	<span class="comment">//direct value: 1024</span></span><br><span class="line">	<span class="comment">//indirect value: 1024</span></span><br><span class="line">	<span class="comment">//doubly indirect value: 1024</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h4><p>从右向左阅读r的定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p;  <span class="comment">//r是对指针p的引用</span></span><br><span class="line">r = &amp;i;  <span class="comment">//p指向i</span></span><br><span class="line">*r=<span class="number">0</span>;  <span class="comment">//i=0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">说明下列变量的类型和值。</span><br><span class="line">(a) <span class="type">int</span>* ip, i, &amp;r = i;</span><br><span class="line">(b) <span class="type">int</span> i,*ip = <span class="number">0</span>;</span><br><span class="line">(c) <span class="type">int</span>* ip, ip2;</span><br><span class="line"></span><br><span class="line">(a): ip 是⼀个指向 <span class="type">int</span> 的指针, i 是⼀个 <span class="type">int</span>, r 是 i 的引⽤。</span><br><span class="line">(b): i 是 <span class="type">int</span> , ip 是⼀个空指针。</span><br><span class="line">(c): ip 是⼀个指向 <span class="type">int</span> 的指针, ip2 是⼀个 <span class="type">int</span>。</span><br></pre></td></tr></table></figure>



<h3 id="void指针"><a href="#void指针" class="headerlink" title="void指针"></a>void指针</h3><p><code>void</code>指针可以存放任意对象的地址。因无类型，仅操作内存空间，不能直接操作<code>void *</code> 指针所指的对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> obj = <span class="number">3.14</span>,</span><br><span class="line">*pd = &amp;obj;</span><br><span class="line"><span class="type">void</span> *pv = &amp;obj; <span class="comment">//obj 可以是任意类型的对象</span></span><br><span class="line">pv = pd;<span class="comment">//void* 可存任何类型,使用时再进行强制类型转换即可</span></span><br></pre></td></tr></table></figure>

<h1 id="CONST限定符"><a href="#CONST限定符" class="headerlink" title="CONST限定符"></a>CONST限定符</h1><blockquote>
<p>const：定义⼀些不能被改变值的变量， const对象⼀旦创建值不再改变，所以必须初始化，且不能被改变。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> bufSize = <span class="number">512</span>;</span><br><span class="line">bufSize = <span class="number">512</span>;<span class="comment">//error，试图写值到const对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i= <span class="built_in">getSize</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j=<span class="number">42</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> k;<span class="comment">//error,k未初始化常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci=i;</span><br><span class="line"><span class="type">int</span> j=ci;</span><br></pre></td></tr></table></figure>

<p>CONST对象仅在文件内有效：</p>
<ul>
<li><p>当多个文件出现同名的const变量，等同于在不同文件分别定义独立变量。</p>
</li>
<li><p>要想在多个文件中使用const变量共享，定义和声明都加extern关键字即可。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file_1.cc定义初始化常量，能被其它文件访问</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize = <span class="built_in">fcn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//file_1.h 头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize ;<span class="comment">//与file_1.cc中定义的bufSize是同⼀个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> buf;  <span class="comment">// 不合法, const 对象必须初始化</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;  <span class="comment">// 合法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = cnt;  <span class="comment">// 合法</span></span><br><span class="line">++cnt; ++sz;  <span class="comment">// 不合法, const 对象不能被改变</span></span><br></pre></td></tr></table></figure>

<h2 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h2><ul>
<li>把引用绑定到const对象上，称之为对常量的引用。</li>
<li>与普通引用不同，对常量的引用不能被用作修改它所绑定的对象</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci=<span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1=ci;</span><br><span class="line">r1=<span class="number">42</span>;  <span class="comment">//error r1是对常量的引用</span></span><br><span class="line"><span class="type">int</span> &amp;r2 = ci;  <span class="comment">//error,试图让非常量引用指向⼀个常量对象</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h3><p>引用类型必须与其所用对象类型一致</p>
<ul>
<li>例外：初始化常量引用时，允许用任意表达式做初始值，只要表达式的结果能转换成引用的类型。</li>
<li>允许为一个常量引用绑定非常量的对象，字面值，一个一般表达式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1=i;  <span class="comment">//允许将const int&amp;绑定到int对象</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2=<span class="number">42</span>;<span class="comment">//r2 是个常量引用</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r3=r1*<span class="number">2</span>;<span class="comment">//r3是个常量引用</span></span><br><span class="line"><span class="type">int</span> &amp;r4=r1*<span class="number">2</span>;<span class="comment">//error，r4是⼀个普通的非常量引用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当⼀个常量引用被绑定到另外⼀种类型发生了什么？</span></span><br><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri=dval;</span><br><span class="line"><span class="comment">//编译器将上述代码改为如下形式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> temp=dval;<span class="comment">//生成临时整型变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri=temp;<span class="comment">//让ri绑定这个临时变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li>临时量(temporary)对象：当编译器需要一个空间来暂存表达式结果的值时，临时创建的一个未命名的变量</li>
<li>对临时量的引用是错误行为:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> &amp;ri = dval; <span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<p><strong>对const的引用很可能引用一个非const对象</strong></p>
<ul>
<li>常量引用仅对引用可参与的操作做出限定，对引用的对象本身是不是常量未做限定</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> &amp;r1 = i; <span class="comment">//r1绑定i</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2 = i;  <span class="comment">//r2绑定i，不允许通过r2修改i</span></span><br><span class="line">r1 = <span class="number">0</span>;  <span class="comment">//ok，r1非常量</span></span><br><span class="line">r2 = <span class="number">0</span>;  <span class="comment">//error，r2是一个常量引用</span></span><br></pre></td></tr></table></figure>

<p>和常量引用⼀样，指向常量的指针同理也没有规定所指对象必须是常量。仅要求不能通过指针改变对象值。</p>
<h2 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h2><p>常量指针必须初始化，允许把指针定义成常量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> errNumb=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> curErr=&amp;errNumb;<span class="comment">// curErr是常量，⼀直指向errNumb(地址不能变)</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="number">3.1415</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *<span class="type">const</span> pip= &amp;pi;<span class="comment">//pip是常量，*pip也是常量,</span></span><br><span class="line"><span class="comment">//pip 是指向常量对象的常量指针 (值与地址均不能更改)</span></span><br><span class="line">*pip = <span class="number">2.72</span>;<span class="comment">//error *pip 是常量</span></span><br><span class="line"><span class="keyword">if</span>(*curErr)&#123;</span><br><span class="line">	<span class="built_in">errorHandler</span>();</span><br><span class="line">	*curErr=<span class="number">0</span>;<span class="comment">//ok *curErr不是常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的哪些初始化是合法的？请说明原因。</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">-1</span>, &amp;r = <span class="number">0</span>; <span class="comment">// 不合法, r 必须引用⼀个对象</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p2 = &amp;i2; <span class="comment">// 合法，常量指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">-1</span>, &amp;r = <span class="number">0</span>(常量引用); <span class="comment">// 合法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = &amp;i2; <span class="comment">// 合法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = &amp;i2; <span class="comment">// 合法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;<span class="type">const</span> r2; <span class="comment">// 不合法, r2 是引用，没有顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i2 = i, &amp;r = i; <span class="comment">// 合法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//说明下面的这些定义是什么意思，挑出其中不合法的。</span></span><br><span class="line"><span class="type">int</span> i,*<span class="type">const</span> cp; <span class="comment">// 不合法, const 指针必须初始化</span></span><br><span class="line"><span class="type">int</span> *p1,*<span class="type">const</span> p2; <span class="comment">// 不合法, const 指针必须初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ic, &amp;r = ic; <span class="comment">// 不合法, const int 必须初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3; <span class="comment">// 不合法, const 指针必须初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p; <span class="comment">// 合法. ⼀个指针，指向 const int</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设已有上⼀个练习中定义的那些变量，则下⾯的哪些语句是合法的？请说明原因。</span></span><br><span class="line">i = ic; <span class="comment">// 合法, 常量赋值给普通变量</span></span><br><span class="line">p1 = p3; <span class="comment">// 不合法, p3 是const指针,不能赋值给普通指针</span></span><br><span class="line">p1 = &amp;ic; <span class="comment">// 不合法, 普通指针不能指向常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p3 = &amp;ic; <span class="comment">// 合法, p3 是常量指针且指向常量</span></span><br><span class="line">p3 = &amp;ic; <span class="comment">//此时不合法 p3 常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p2 = p1; <span class="comment">// 合法, 可以将普通指针赋值给常量指针</span></span><br><span class="line">p2 = p1;<span class="comment">//此时不合法 p2是常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ic = *p3; <span class="comment">// 合法, 对 p3 取值后是⼀个 int 然后赋值给 ic</span></span><br><span class="line">ic = *p3;<span class="comment">//此时不合法，ic是常量</span></span><br></pre></td></tr></table></figure>

<h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><ul>
<li>顶层const：指针本身是个常量。</li>
<li>底层const：指针指向的对象是个常量。拷贝时严格要求相同的底层const资格。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1=&amp;i;<span class="comment">//p1常量，顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci=<span class="number">42</span>;<span class="comment">//ci常量，顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2=&amp;ci;<span class="comment">//*p2常量，底层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3=p2;<span class="comment">//靠右顶层，靠左底层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r =ci;<span class="comment">//用于声明引用的const都是底层const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝时，顶层const不受影响</span></span><br><span class="line">i=ci;<span class="comment">//拷贝ci的值，ci顶层const，⽆影响</span></span><br><span class="line">p2=p3;<span class="comment">//p2 p3所指对象类型相同 p3顶层const部分不影响</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝时严格要求相同的底层const资格,数据类型能够转换。</span></span><br><span class="line"><span class="type">int</span> *p =p3;<span class="comment">//error p3包含底层const定义，p没有</span></span><br><span class="line">p2=p3;<span class="comment">//ok p2 p3都是底层const</span></span><br><span class="line">p2=&amp;i; <span class="comment">//ok int* 转const int*</span></span><br><span class="line"><span class="type">int</span> &amp;r=ci;<span class="comment">//error 普通int&amp; 不能绑定到int 常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2=i;<span class="comment">//ok const int&amp; 可以绑定到int</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于下面的这些语句，请说明对象被声明成了顶层const还是底层const？</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> v2 = <span class="number">0</span>; <span class="type">int</span> v1 = v2;</span><br><span class="line"><span class="type">int</span> *p1 = &amp;v1, &amp;r1 = v1;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;v2,</span><br><span class="line">*<span class="type">const</span> p3 = &amp;i, &amp;r2 = v2;</span><br><span class="line"><span class="comment">//v2 是顶层const，p2 是底层const，p3 既是顶层const⼜是底层const，r2 是底层const。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设已有上⼀个练习中所做的那些声明，则下面的哪些语句是合法的？</span></span><br><span class="line"><span class="comment">//请说明顶层const和底层const在每个例子中有何体现。</span></span><br><span class="line">r1 = v2; <span class="comment">// 合法, 顶层const在拷贝时不受影响</span></span><br><span class="line">p1 = p2; <span class="comment">// 不合法, p2 是底层const，如果要拷贝必须要求 p1 也是底层const</span></span><br><span class="line">p2 = p1; <span class="comment">// 合法, int* 可以转换成const int*</span></span><br><span class="line">p1 = p3; <span class="comment">// 不合法, p3 是⼀个底层const，p1 不是</span></span><br><span class="line">p2 = p3; <span class="comment">// 合法, p2 和 p3 都是底层const，拷贝时忽略掉顶层const</span></span><br></pre></td></tr></table></figure>

<h2 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h2><ul>
<li>常量表达式：指值不会改变，且在编译过程中就能得到计算结果的表达式。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//⼀个对象（表达式）是不是常量表达式由数据类型和初始值共同决定</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_file=<span class="number">30</span>;  <span class="comment">//max_file是常量表达式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> limit = max_file+<span class="number">1</span>;  <span class="comment">//limit是常量表达式</span></span><br><span class="line"><span class="type">int</span> staff_size = <span class="number">7</span>;  <span class="comment">//staff_size不是常量表达式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="built_in">get_size</span>();  <span class="comment">//运⾏时获取，sz是常量表达式。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>C++11新标准规定，允许将变量声明为<code>constexpr</code> 类型以便由编译器来验证变量的值是否是⼀个常量的表达式。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;  <span class="comment">//20是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> limit = mf+<span class="number">1</span>;  <span class="comment">//mf+1是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">get_size</span>(); <span class="comment">//取决于get_size()是否是constexpr函数</span></span><br></pre></td></tr></table></figure>

<h3 id="字面值类型"><a href="#字面值类型" class="headerlink" title="字面值类型"></a>字面值类型</h3><p>常量表达式的值编译时就得到计算，类型简单，值容易 得到，称为为“字面值类型”（literal type）</p>
<ul>
<li>算数类型</li>
<li>引用，指针，nullptr，0或固定位置</li>
</ul>
<h2 id="指针和constexpr"><a href="#指针和constexpr" class="headerlink" title="指针和constexpr"></a>指针和constexpr</h2><ul>
<li>constexpr把所定义的对象置为顶层</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p=<span class="literal">nullptr</span>;<span class="comment">//p是⼀个指向常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *q=<span class="literal">nullptr</span>;<span class="comment">//q是常量指针</span></span><br><span class="line"><span class="comment">//constexpr把所定义的对象置为顶层</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *nq=<span class="literal">nullptr</span>;<span class="comment">//nq是常量指针</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> i=<span class="number">42</span>;<span class="comment">//i是常量</span></span><br><span class="line"><span class="comment">//i,j定义在函数外</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p=&amp;i;<span class="comment">//p是常量指针,指向整型常量i</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p1=&amp;j;<span class="comment">//p1是常量指针，指向整数j</span></span><br></pre></td></tr></table></figure>

<h1 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h1><ul>
<li>程序越来越复杂，类型越来越复杂。类型难于拼写，明确目的含义，搞不清需要什么类型。</li>
</ul>
<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><ul>
<li><p>传统别名：使用<code>typedef</code>来定义类型的同义词。 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wages; </span><br><span class="line">wages hour,weekly;  <span class="comment">//double hour,weekly;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>新标准别名：别名声明（alias declaration）： </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> SI = Sales_item;  <span class="comment">//（C++11）</span></span><br><span class="line">SI items;<span class="comment">//Sales_item items;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="指针，常量和类型别名"><a href="#指针，常量和类型别名" class="headerlink" title="指针，常量和类型别名"></a>指针，常量和类型别名</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于复合类型（指针等）不能代回原式来进行理解</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;  <span class="comment">// pstring是char*的别名</span></span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>; <span class="comment">// cstr是指向char的常量指针</span></span><br><span class="line"><span class="type">const</span> pstring *ps;<span class="comment">//ps是⼀个指针，对象是指向char的常量指针</span></span><br><span class="line"><span class="comment">//基本数据类型是指针而不是const char。</span></span><br></pre></td></tr></table></figure>

<h2 id="AUTO类型说明符-C-11"><a href="#AUTO类型说明符-C-11" class="headerlink" title="AUTO类型说明符 (C++ 11)"></a>AUTO类型说明符 (C++ 11)</h2><p>清楚的知道表达式类型并不容易，因此引入<code>auto</code>。</p>
<ul>
<li>auto类型说明符：让编译器自行推断类型。显然auto定义变量必须要有初始值。</li>
<li>一条生命一句只能有一种基本数据类型：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi =<span class="number">3.14</span>；<span class="comment">//错误,类型不⼀致</span></span><br></pre></td></tr></table></figure>

<h3 id="复合类型，常量和auto"><a href="#复合类型，常量和auto" class="headerlink" title="复合类型，常量和auto"></a>复合类型，常量和auto</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>, &amp;r = i; </span><br><span class="line"><span class="keyword">auto</span> a = r; <span class="comment">//推断a类型是int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//会忽略顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = i;</span><br><span class="line"><span class="keyword">auto</span> b = ci;<span class="comment">//推断int，忽略顶层const</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">1</span>; <span class="type">const</span> <span class="keyword">auto</span> f = ci;</span><br><span class="line"><span class="comment">//推断类型是int，如果希望是顶层const需要⾃⼰加const</span></span><br></pre></td></tr></table></figure>

<h2 id="DECLTYPE类型提示符-C-11"><a href="#DECLTYPE类型提示符-C-11" class="headerlink" title="DECLTYPE类型提示符(C++ 11)"></a>DECLTYPE类型提示符(C++ 11)</h2><p><code>decltype</code> 是一个 C++11 中引入的关键字，用于获取表达式的类型。它的语法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(expression)</span><br></pre></td></tr></table></figure>

<p>其中，<code>expression</code> 是一个表达式，可以是变量、函数调用、类型转换等。</p>
<p><code>decltype</code> 的作用是根据表达式的类型推断出一个变量或表达式的类型，并且返回该类型。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x) y; <span class="comment">// y 的类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">square</span><span class="params">(<span class="type">double</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">square</span>(<span class="number">3.14</span>)) result; <span class="comment">// result 的类型为 double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">decltype</span>(p.x) a; <span class="comment">// a 的类型为 int</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>decltype(x)</code> 返回 <code>int</code> 类型，因为表达式 <code>x</code> 的类型是 <code>int</code>。<code>decltype(square(3.14))</code> 返回 <code>double</code> 类型，因为表达式 <code>square(3.14)</code> 的返回类型是 <code>double</code>。<code>decltype(p.x)</code> 返回 <code>int</code> 类型，因为 <code>p.x</code> 是 <code>Point</code> 结构体的一个成员变量。</p>
<p><code>decltype</code> 在编写泛型代码时非常有用，可以根据参数的类型来推断出函数的返回类型，避免手动指定返回类型。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">multiply</span><span class="params">(T a, U b)</span> -&gt; <span class="title">decltype</span><span class="params">(a * b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> y = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">auto</span> result = <span class="built_in">multiply</span>(x, y); <span class="comment">// result 的类型为 double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>multiply</code> 函数使用 <code>decltype(a * b)</code> 来推断返回类型，根据传入的参数类型，返回类型会自动推断为 <code>double</code>。</p>
<p><code>decltype</code> 是一个非常有用的关键字，可以让编译器根据表达式的类型来推断出变量或函数的类型，提高代码的灵活性和可读性。</p>
<ul>
<li><p>从表达式的类型推断出要定义的变量的类型。 </p>
</li>
<li><p><strong>decltype</strong>：选择并返回操作数的数据类型,不计算表达式的值。</p>
</li>
</ul>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum = x; <span class="comment">//推断sum的类型是函数f的返回类型。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不会忽略顶层const。 </li>
<li>如果对变量加括号，编译器会将其认为是⼀个表达式，<code>decltype((i))</code>得到结果为引用。 </li>
<li>赋值是会产⽣引用的⼀类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i&#x3D;x 的类型是 int&amp;。</li>
</ul>
<h1 id="自定义数据结构STRUCT"><a href="#自定义数据结构STRUCT" class="headerlink" title="自定义数据结构STRUCT"></a>自定义数据结构STRUCT</h1><blockquote>
<p>尽量不要把类定义和对象定义放在⼀ 起。如struct Student{} xiaoming,xiaofang;</p>
</blockquote>
<ul>
<li>类可以以关键字struct开始，紧跟类名和类体。 </li>
<li>类数据成员：类体定义类的成员。 </li>
<li>C++11：可以为类数据成员提供⼀个<strong>类内初始值</strong> （in-class initializer）。</li>
</ul>
<p>下面举例：</p>
<ul>
<li>定义Sales_data类：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sales_data.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line">	std::string bookNo;</span><br><span class="line">	<span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用sales_data类</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sales_data.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Sales_data.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Sales_data data1, data2;</span><br><span class="line"><span class="comment">// code to read into data1 and data2</span></span><br><span class="line">	<span class="type">double</span> price = <span class="number">0</span>; <span class="comment">// price per book, used to calculate total revenue</span></span><br><span class="line"><span class="comment">// read the first transactions: ISBN, number of books sold, price per b</span></span><br><span class="line">	std::cin &gt;&gt; data1.bookNo &gt;&gt; data1.units_sold &gt;&gt; price;</span><br><span class="line"><span class="comment">// calculate total revenue from price and units_sold</span></span><br><span class="line">	data1.revenue = data1.units_sold * price;</span><br><span class="line"><span class="comment">// read the second transaction</span></span><br><span class="line">	std::cin &gt;&gt; data2.bookNo &gt;&gt; data2.units_sold &gt;&gt; price;</span><br><span class="line">	data2.revenue = data2.units_sold * price;</span><br><span class="line"><span class="comment">// code to check whether data1 and data2 have the same ISBN</span></span><br><span class="line"><span class="comment">// and if so print the sum of data1 and data2</span></span><br><span class="line">	<span class="keyword">if</span> (data1.bookNo == data2.bookNo) &#123;</span><br><span class="line">		<span class="type">unsigned</span> totalCnt = data1.units_sold + data2.units_sold;</span><br><span class="line">		<span class="type">double</span> totalRevenue = data1.revenue + data2.revenue;</span><br><span class="line"><span class="comment">// print: ISBN, total sold, total revenue, average price per book</span></span><br><span class="line">		std::cout &lt;&lt; data1.bookNo &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; totalCnt</span><br><span class="line">		          &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; totalRevenue &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (totalCnt != <span class="number">0</span>)</span><br><span class="line">			std::cout &lt;&lt; totalRevenue / totalCnt &lt;&lt; std::endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;(no sales)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// indicate success</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// transactions weren&#x27;t for the same ISBN</span></span><br><span class="line">		std::cerr &lt;&lt; <span class="string">&quot;Data must refer to the same ISBN&quot;</span></span><br><span class="line">		          &lt;&lt; std::endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// indicate failure</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写自己的头文件"><a href="#编写自己的头文件" class="headerlink" title="编写自己的头文件"></a>编写自己的头文件</h3><ul>
<li>头文件通常包含一些只能被定义⼀次的实体：类、 const和constexpr变量。</li>
</ul>
<p>预处理器概述：</p>
<ul>
<li>预处理器（preprocessor）：确保头文件多次包含仍能安全⼯作。 </li>
<li>当预处理器看到#include标记时，会用指定的头文件内容代替#include </li>
<li>头文件保护符（header guard）：头文件保护符依赖于预处理变量的状态：已定义和未定义。 <ul>
<li>#indef已定义时为真 </li>
<li>#inndef未定义时为真 </li>
<li>头文件保护符的名称需要唯⼀，且保持全部大写。养成良好习惯，不论是否该头文件被包含，都要加保护符。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H <span class="comment">//SALES_DATA_H未定义时为真</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line">strct Sale_data&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML导读</title>
    <url>/2023/07/14/HTML%E5%AF%BC%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTML 是网页使用的语言，定义了网页的结构和内容。浏览器访问网站，其实就是从服务器下载 HTML 代码，然后渲染出网页。</p>
<p>HTML 的全名是“超文本标记语言”（HyperText Markup Language），上个世纪90年代由欧洲核子研究中心的物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明。它的最大特点就是支持超链接，可以跳转到其他网页，从而构成了整个互联网。1999年，HTML 4.01 版发布，成为广泛接受的 HTML 标准。2014年，HTML 5 发布，这是目前正在使用的版本。</p>
<p>浏览器的网页开发，涉及三种技术：HTML、CSS 和 JavaScript。HTML 语言定义网页的结构和内容，CSS 样式表定义网页的样式，JavaScript 语言定义网页与用户的互动行为。</p>
<span id="more"></span>

<p>下面就是一个简单网页的 HTML 源码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这段代码，可以保存成文件<code>hello.html</code>。浏览器打开这个本地文件，就能看到文字“Hello World”。</p>
<h2 id="网页的基本概念"><a href="#网页的基本概念" class="headerlink" title="网页的基本概念"></a>网页的基本概念</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>HTML 代码由许许多多不同的标签（tag）构成。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;title&gt;</code>和<code>&lt;/title&gt;</code>就是一对标签。</p>
<p>标签用来告诉浏览器，如何处理这段代码。标签的内容就是浏览器所要渲染的、展示在网页上的内容。</p>
<p><strong>标签放在一对尖括号里面（比如<code>&lt;title&gt;</code>），大多数标签都是成对出现的，分成开始标签和结束标签，结束标签在标签名之前加斜杠（比如<code>&lt;/title&gt;</code>）。但是，也有一些标签不是成对使用，而是只有开始标签，没有结束标签，比如上一节示例的<code>&lt;meta&gt;</code>标签。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;meta&gt;</code>标签就没有结束标签<code>&lt;/meta&gt;</code>。</p>
<p>这种单独使用的标签，通常是因为标签本身就足够完成功能了，不需要标签之间的内容。实际引用中，它们主要用来提示浏览器，做一些特别处理。</p>
<p>标签可以嵌套。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;div&gt;</code>标签内部包含了一个<code>&lt;p&gt;</code>标签。</p>
<p>嵌套时，必须保证正确的闭合顺序，不能跨层嵌套，否则会出现意想不到的渲染结果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码就是错误的嵌套，闭合顺序不正确。</p>
<p><strong>标签名是大小写不敏感，比如<code>&lt;title&gt;</code>和<code>&lt;TITLE&gt;</code>是同一个标签。不过，一般习惯都是使用小写。</strong></p>
<p>另外，HTML 语言忽略缩进和换行。也就是说，下面的写法与一行的写法效果是一样的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>  网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>进一步说，整个网页的 HTML 代码完全可以写成一行，浏览器照样解析，结果完全一样。有时，正式发布网页之前，开发者会把源码压缩成一行，以减少传输的字节数。网页内容的缩进和换行，主要靠 CSS 样式来实现。</p>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>浏览器渲染网页的时候，会把 HTML 源码解析成一个标签树，每个标签都是一个节点（node），称为网页元素（element）。所以，“标签”和“元素”基本上是同义词，只是使用的场合不一样：标签是源码角度来看，元素是从编程角度来看，比如<code>&lt;p&gt;</code>标签对应网页的<code>p</code>元素。</p>
<p>嵌套的标签就构成了网页元素的层级关系。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>div</code>元素内部包含了一个<code>p</code>元素。上层元素又称为“父元素”，下层元素又称为“子元素”，即<code>div</code>是<code>p</code>的父元素，<code>p</code>是<code>div</code>的子元素。</p>
<p><strong>所有元素可以分成两大类：块级元素（block）和行内元素（inline）。块级元素默认占据一个独立的区域，在网页上会自动另起一行，占据 100% 的宽度。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>p</code>元素是块级元素，因此浏览器会将内容分成两行显示。</p>
<p><strong>行内元素默认与其他元素在同一行，不产生换行。比如，<code>span</code>就是行内元素，通常用来为某些文字指定特别的样式。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>上面代码中，<code>span</code>元素是行内元素，因此浏览器会将两行内容放在一行显示。</strong></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><strong>属性（attribute）是标签的额外信息，使用空格与标签名和其他属性分隔。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;img&gt;</code>标签有两个属性：<code>src</code>和<code>width</code>。</p>
<p>属性可以用等号指定属性值，比如上例的<code>demo.jpg</code>就是<code>src</code>的属性值。<strong>属性值一般放在双引号里面，这不是必需的，但推荐总是使用双引号。</strong></p>
<p><strong>注意，属性名是大小写不敏感的，<code>onclick</code>和<code>onClick</code>是同一个属性。</strong></p>
<p>HTML 提供大量属性，用来定制标签的行为。</p>
<h2 id="网页的基本标签"><a href="#网页的基本标签" class="headerlink" title="网页的基本标签"></a>网页的基本标签</h2><p>符合语法标准的网页，应该满足下面的基本结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不管多么复杂的网页，都是从上面这个基本结构衍生出来的。</p>
<p><strong>注意，HTML 代码的缩进和换行，对于浏览器不产生作用。所以，上面的代码完全可以写成一行，渲染结果不变。上面这样分行写，只是为了提高可读性。</strong></p>
<p>下面介绍，这个基本结构的主要标签，它们构成网页的骨架。</p>
<h3 id><a href="#" class="headerlink" title="&lt;!doctype&gt;&#96;"></a>&lt;!doctype&gt;&#96;</h3><p>网页的第一个标签通常是<code>&lt;!doctype&gt;</code>，表示文档类型，告诉浏览器如何解析网页。</p>
<p>一般来说，只要像下面这样，简单声明<code>doctype</code>为<code>html</code>即可。浏览器就会按照 HTML5 的规则处理网页。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>有时，该标签采用完全大写的形式，以便区别于正常的 HTML 标签。因为<code>&lt;!doctype&gt;</code>本质上不是标签，更像一个处理指令。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title="&lt;html&gt;"></a><code>&lt;html&gt;</code></h3><p><strong><code>&lt;html&gt;</code>标签是网页的顶层容器，也称为根元素（root element），其他元素都是它的子元素。一个网页只能有一个<code>&lt;html&gt;</code>标签。</strong></p>
<p><strong>该标签的<code>lang</code>属性，表示网页内容默认的语言。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示，网页的语言是英语。更详细的介绍，参见《属性》一章。</p>
<h3 id="-2"><a href="#-2" class="headerlink" title="&lt;head&gt;"></a><code>&lt;head&gt;</code></h3><p><code>&lt;head&gt;</code>标签是一个容器标签，用于放置网页的元信息。它的内容不会出现在网页上，而是为网页渲染做准备。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;head&gt;</code>是<code>&lt;html&gt;</code>的第一个子元素。如果网页不包含<code>&lt;head&gt;</code>，浏览器会自动创建一个。</p>
<p><code>&lt;head&gt;</code>的子元素一般有下面七个，后文会一一介绍。</p>
<ul>
<li><strong><code>&lt;meta&gt;</code>：设置网页的元数据。</strong></li>
<li><strong><code>&lt;link&gt;</code>：连接外部样式表。</strong></li>
<li><strong><code>&lt;title&gt;</code>：设置网页标题。</strong></li>
<li><strong><code>&lt;style&gt;</code>：放置内嵌的样式表。</strong></li>
<li><strong><code>&lt;script&gt;</code>：引入脚本。</strong></li>
<li><strong><code>&lt;noscript&gt;</code>：浏览器不支持脚本时，所要显示的内容。</strong></li>
<li><strong><code>&lt;base&gt;</code>：设置网页内部相对 URL 的计算基准。</strong></li>
</ul>
<h3 id="-3"><a href="#-3" class="headerlink" title="&lt;meta&gt;"></a><code>&lt;meta&gt;</code></h3><p><code>&lt;meta&gt;</code>标签用于设置或说明网页的元数据，必须放在<head>里面。一个<meta>标签就是一项元数据，网页可以有多个<meta>。</head></p>
<p>一般来说，网页至少应该具有以下两个<code>&lt;meta&gt;</code>标签，而且必须在<code>&lt;head&gt;</code>的最前面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>（1）charset 属性</strong><br><code>&lt;meta&gt;</code>有一个charset属性，指定网页的编码方式，该属性非常重要。如果设置得不正确，浏览器可能无法正确解码，就会出现乱码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码声明，网页为<code>utf-8</code>编码。虽然可以使用其他的编码方式，但几乎总是应该采用 UTF-8。注意，声明的编码方式，应该与网页实际的编码方式一致，即声明了<code>utf-8</code>，网页就应该使用 UTF-8 编码保存。</p>
<p><strong>（2）name 属性，content 属性</strong></p>
<p><code>&lt;meta&gt;</code>的name属性表示元数据的名字，content属性表示元数据的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML 语言入门&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,教程&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码包含了三个元数据：**<code>description</code>是网页内容的描述，<code>keywords</code>是网页内容的关键字，<code>author</code>是网页作者。**</p>
<p>元数据有很多种，大部分涉及浏览器内部工作机制，或者特定的使用场景，这里就不一一介绍了。下面是一些例子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;application-name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Application Name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;program&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your document&#x27;s subject&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）http-equiv 属性，content 属性</strong></p>
<p><code>http-equiv</code>属性用来覆盖 HTTP 回应的头信息字段，<code>content</code>属性是该字段的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码可以覆盖 HTTP 回应的<code>Content-Security-Policy</code>字段。</p>
<p>下面是另一些例子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Type=text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30;URL=&#x27;http://website.com&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="-4"><a href="#-4" class="headerlink" title="&lt;title&gt;"></a><code>&lt;title&gt;</code></h3><p><strong><code>&lt;title&gt;</code>标签用于指定网页的标题，会显示在浏览器窗口的标题栏。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>搜索引擎根据这个标签，显示每个网页的标题。它对于网页在搜索引擎的排序，有很大的影响，应该精心安排，反映网页的主题。</p>
<p><code>&lt;title&gt;</code>标签的内部，不能再放置其他标签，只能放置无格式的纯文本。</p>
<h3 id="-5"><a href="#-5" class="headerlink" title="&lt;body&gt;"></a><code>&lt;body&gt;</code></h3><p><strong><code>&lt;body&gt;</code>标签是一个容器标签，用于放置网页的主体内容。浏览器显示的页面内容，都是放置在它的内部。它是<code>&lt;html&gt;</code>的第二个子元素，紧跟在<code>&lt;head&gt;</code>后面。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="空格和换行"><a href="#空格和换行" class="headerlink" title="空格和换行"></a>空格和换行</h2><p>HTML 语言有自己的空格处理规则。标签内容的头部和尾部的空格，一律忽略不计。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  hello world   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>hello</code>前面的空格和<code>world</code>后面的空格，浏览器一律忽略不计。</p>
<p><strong>标签内容里面的多个连续空格（包含制表符<code>\t</code>），会被浏览器合并成一个。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello      world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>hello</code>与<code>world</code>之间有多个连续空格，浏览器会将它们合并成一个。网页渲染的结果是，<code>hello</code>与<code>world</code>之间只有一个空格。</p>
<p><strong>浏览器还会将文本里面的换行符（<code>\n</code>）和回车符（<code>\r</code>），替换成空格。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>hello</code>与<code>world</code>之间有多个换行，浏览器会将它们替换成空格，然后再将多个空格合并成一个。网页渲染的结果是，<code>hello</code>与<code>world</code>之间有一个空格。</p>
<p>这意味着，HTML 源码里面的换行，不会产生换行效果。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>HTML 代码可以包含注释，浏览器会自动忽略注释。注释以<code>&lt;!--</code>开头，以<code>--&gt;</code>结尾，下面就是一个注释的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是一个注释 --&gt;</span><br></pre></td></tr></table></figure>

<p>注释可以是多行的，并且内部的 HTML 都不再生效了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">&lt;p&gt;</span></span><br><span class="line"><span class="comment">hello world</span></span><br><span class="line"><span class="comment">&lt;/p&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码是一个注释的区块，内部的代码都是无效的，浏览器不会解析，更不会渲染它们。</p>
<p>注释有助于理解代码的含义，复杂的代码块前面最好加上注释。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础语法入门</title>
    <url>/2023/07/23/JavaScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>JavaScript 是一种广泛用于前端开发和后端开发的脚本语言。它是一种动态类型、基于对象和事件驱动的语言，最初由 Brendan Eich 在1995年创建。</p>
<p>JavaScript 最初被设计为用于在网页上添加交互性和动态内容。它可以直接嵌入到 HTML 页面中，并通过浏览器解释和执行。随着时间的推移，JavaScript 在 Web 开发中的重要性不断增加，它已成为 Web 技术的核心之一。</p>
<p>JavaScript 具有以下特点：</p>
<ol>
<li><p><strong>动态类型</strong>：JavaScript 是一种动态类型语言，变量的类型在运行时根据赋值决定。这意味着同一个变量可以在不同的上下文中拥有不同的类型。</p>
</li>
<li><p><strong>基于对象</strong>：JavaScript 是一种基于对象的语言，几乎所有的东西都是对象。它支持面向对象编程的概念，如封装、继承和多态。</p>
</li>
<li><p><strong>事件驱动</strong>：JavaScript 可以通过事件来响应用户的交互操作，例如点击按钮、输入文本等。它可以捕获和处理这些事件，并执行相应的操作。</p>
</li>
<li><p><strong>跨平台</strong>：JavaScript 可以在不同的平台上运行，包括浏览器、服务器、移动设备等。它是一种与平台无关的语言。</p>
</li>
<li><p><strong>丰富的库和框架</strong>：JavaScript 生态系统非常丰富，有大量的库和框架可用于简化开发过程。例如，jQuery、React、Vue.js 等都是流行的 JavaScript 库和框架。</p>
</li>
</ol>
<span id="more"></span>

<h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h2 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h2><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎学习JavaScript！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h2><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎学习JavaScript！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉</span></span></span><br><span class="line"><span class="language-javascript">  	<span class="title function_">alert</span>(<span class="number">666</span>);  <span class="comment">//忽略alert</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h1><p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p>
<h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>使用 <code>// </code> 注释单行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎学习JavaScript！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>使用 <code>/* */</code> 注释多行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    	多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎学习JavaScript！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>被注释掉的信息可在网页源代码中查看，但不会生成任何效果</p>
<p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p>
<h2 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h2><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">1</span>);   <span class="comment">//可以带&#x27;;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">2</span>)    <span class="comment">//也可以不带&#x27;;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p>
<p>在个人学习中，如果对缩进敏感的话，可以不使用分号作为结束符；若不注意缩进的话，建议适应分号作为结束符，使代码更清晰</p>
<h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p>
<p>举例说明：如按键盘上的方向键，向上&#x2F;下键可以滚动页面，按向上&#x2F;下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p>
<ul>
<li><p>alert()</p>
</li>
<li><p>document.wirte()</p>
</li>
</ul>
<p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，<code>alert()</code>会一弹窗的形式将信息展示给用户，<code>document.wirte()</code>会将信息展示在浏览器页面中</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="声明与关键字var，let的区别"><a href="#声明与关键字var，let的区别" class="headerlink" title="声明与关键字var，let的区别"></a>声明与关键字var，let的区别</h2><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code> </p>
<p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，但它们有一些区别：</p>
<ul>
<li><p><strong>作用域</strong>：var 声明的变量具有函数作用域，而 let 声明的变量具有块级作用域。这意味着使用 var 声明的变量在函数内部是可见的，而 let 声明的变量在块（例如，if 语句、循环等）内部是可见的。</p>
</li>
<li><p><strong>变量提升</strong>：使用 var 声明的变量会被提升到其所在函数的顶部，这意味着可以在声明之前访问该变量。而使用 let 声明的变量不会被提升，只有在声明之后才能访问。</p>
</li>
<li><p><strong>重复声明</strong>：使用 var 声明的变量可以被重复声明，而使用 let 声明的变量在同一个作用域内不能被重复声明。重复声明 var 变量会被忽略，并且不会引发错误，而重复声明 let 变量会引发 SyntaxError。</p>
</li>
<li><p><strong>全局对象属性</strong>：使用 var 声明的变量会成为全局对象的属性，而使用 let 声明的变量不会成为全局对象的属性。在浏览器环境下，全局对象是 window 对象。</p>
</li>
</ul>
<p>以下是使用 <code>let</code> 时的注意事项：</p>
<ol>
<li>允许声明和赋值同时进行</li>
<li>不允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
<li>JavaScript 中内置的一些关键字不能被当做变量名</li>
</ol>
<p>以下是使用 <code>var</code> 时的注意事项：</p>
<ol start="2">
<li>允许声明和赋值同时进行</li>
<li>允许重复声明</li>
<li>允许同时声明多个变量并赋值</li>
</ol>
<p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code></p>
<p>总的来说，推荐使用 let 来声明变量，因为它更符合现代 JavaScript 的作用域规则，并且可以帮助避免一些常见的问题，如变量提升和重复声明。然而，在一些特定的情况下，如果需要使用函数作用域，或者需要在全局对象上创建属性，可以考虑使用 var。</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h2><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p>
<ol>
<li>只能是字母、数字、下划线、$，且不能能数字开头</li>
<li>字母区分大小写，如 Age 和 age 是不同的变量</li>
<li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li>
<li>尽量保证变量具有一定的语义，见字知义</li>
</ol>
<p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 3age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念：使用 const 声明的变量称为“常量”。</p>
<p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p>
<p>命名规范：和变量一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p>
</blockquote>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote>
<p>计算机世界中的万事成物都是数据。</p>
</blockquote>
<p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p>
<p>注：通过 typeof 关键字检测数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数值类型–Number"><a href="#数值类型–Number" class="headerlink" title="数值类型–Number"></a>数值类型–Number</h2><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数。JavaScript是一门弱类型语言，并不区分整数型，浮点型等数据，而是将所有为数字的类型均归类为数值型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p>
<h2 id="字符串类型-Str型"><a href="#字符串类型-Str型" class="headerlink" title="字符串类型 Str型"></a>字符串类型 Str型</h2><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，两者均可以出现在JavaScript中，但是在HTML中我们使用双引号包裹字符串类型的数据，因此在JavaScript中，我们推荐使用单引号，做出区别。</p>
<p>注意事项：</p>
<ol>
<li>无论单引号或是双引号必须成对使用</li>
<li>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已</li>
<li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔类型-Boolean型"><a href="#布尔类型-Boolean型" class="headerlink" title="布尔类型 Boolean型"></a>布尔类型 Boolean型</h2><p>在JavaScript，表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="undefined-未定义型"><a href="#undefined-未定义型" class="headerlink" title="undefined 未定义型"></a>undefined 未定义型</h2><p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：JavaScript 中变量的值决定了变量的数据类型。并无关键字决定数据的类型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">3</span> <span class="comment">//number型</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">&#x27;hello world&#x27;</span> <span class="comment">//字符串类型</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="literal">true</span>  <span class="comment">//Boolean类型</span></span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p>
<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>) <span class="comment">//输入3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>) <span class="comment">//输入3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//prompt()接收的数据均默认转为字符型</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//会拼接为&#x27;33&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//可以在prompt前面加一个&#x27;+&#x27;符号将接收的数据转为数值型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>) <span class="comment">//输入3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = +<span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>) <span class="comment">//输入3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b); <span class="comment">//6</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p>
<h2 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h2><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="模板字符串的使用"><a href="#模板字符串的使用" class="headerlink" title="模板字符串的使用"></a>模板字符串的使用</h1><p>在 JavaScript 中，模板字符串是一种特殊的字符串字面量，使用反引号（&#96;）来包裹。模板字符串提供了一种更方便和灵活的方式来创建包含变量、表达式和换行符的字符串。</p>
<p>以下是一些模板字符串的使用方法和特性：</p>
<ol>
<li>插入变量：使用 <code>$&#123;&#125;</code> 语法可以在模板字符串中插入变量。变量将被替换为其对应的值。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>表达式求值：在 <code>$&#123;&#125;</code> 中可以放置任意 JavaScript 表达式，并在模板字符串中求值。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`The sum of <span class="subst">$&#123;x&#125;</span> and <span class="subst">$&#123;y&#125;</span> is <span class="subst">$&#123;x + y&#125;</span>.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：The sum of 5 and 10 is 15.</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>多行字符串：模板字符串可以跨越多行，而不需要使用转义字符或字符串拼接。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multilineString = <span class="string">`</span></span><br><span class="line"><span class="string">  This is a</span></span><br><span class="line"><span class="string">  multiline</span></span><br><span class="line"><span class="string">  string.</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multilineString);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">//   This is a</span></span><br><span class="line"><span class="comment">//   multiline</span></span><br><span class="line"><span class="comment">//   string.</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>嵌套模板字符串：模板字符串可以嵌套在其他模板字符串中。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedTemplate = <span class="string">`Outer template: <span class="subst">$&#123;<span class="string">`Inner template: <span class="subst">$&#123;name&#125;</span>`</span>&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nestedTemplate); <span class="comment">// 输出：Outer template: Inner template: Alice</span></span><br></pre></td></tr></table></figure>

<p>模板字符串提供了一种更清晰和易读的方式来创建复杂的字符串，特别是当涉及到变量和表达式时。它们在处理动态字符串拼接和格式化输出时非常有用。</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>数字是用来计算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p>
<p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td align="left">求和</td>
</tr>
<tr>
<td>-</td>
<td align="left">求差</td>
</tr>
<tr>
<td>*</td>
<td align="left">求积</td>
</tr>
<tr>
<td>&#x2F;</td>
<td align="left">求商</td>
</tr>
<tr>
<td><strong>%</strong></td>
<td align="left">取模（取余数），开发中经常用于作为某个数字是否被整除</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：在计算失败时，显示的结果是 NaN （not a number）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">2</span>) <span class="comment">//  4 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="number">10</span>)  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num)  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 取模(取余数)  使用场景：  用来判断某个数是否能够被整除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>) <span class="comment">//  0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span> % <span class="number">3</span>) <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>) <span class="comment">//  2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>) <span class="comment">//  3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意事项 : 如果我们计算失败，则返回的结果是 NaN (not a number)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">2</span>)   <span class="comment">// pink老师2</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符：对变量进行赋值的运算符</p>
<p> &#x3D;     将等号右边的值赋予给左边, 要求左边必须是一个容器</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>+&#x3D;</td>
<td>加法赋值</td>
</tr>
<tr>
<td>-+</td>
<td>减法赋值</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘法赋值</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除法赋值</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>取余赋值</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="comment">// num = num + 1</span></span><br><span class="line"><span class="comment">// 采取赋值运算符</span></span><br><span class="line"><span class="comment">// num += 1</span></span><br><span class="line">num += <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自增-自减运算符"><a href="#自增-自减运算符" class="headerlink" title="自增&#x2F;自减运算符"></a>自增&#x2F;自减运算符</h2><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>自增</td>
<td>变量自身的值加1，例如: x++</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量自身的值减1，例如: x–</td>
</tr>
</tbody></table>
<ol>
<li>++在前和++在后在单独使用时二者并没有差别，一般开发中都是独立使用</li>
<li>++在后（后缀式）会使用更多</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>只有变量能够使用自增和自减运算符</li>
<li>++、– 可以在变量前面也可以在变量后面，比如: x++  或者  ++x</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let num = 10</span></span><br><span class="line">    <span class="comment">// num = num + 1</span></span><br><span class="line">    <span class="comment">// num += 1</span></span><br><span class="line">    <span class="comment">// // 1. 前置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// ++i</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(++i + 1)</span></span><br><span class="line">    <span class="comment">// 2. 后置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// i++</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(i++ + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 了解 </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + ++i + i)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>使用场景：比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true &#x2F; false）</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>左边是否大于右边</td>
</tr>
<tr>
<td>&lt;</td>
<td>左边是否小于右边</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>左边是否大于或等于右边</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>左边是否小于或等于右边</td>
</tr>
<tr>
<td><strong>&#x3D;&#x3D;&#x3D;</strong></td>
<td><strong>左右两边是否<code>类型</code>和<code>值</code>都相等（重点）</strong></td>
</tr>
<tr>
<td><strong>&#x3D;&#x3D;</strong></td>
<td><strong>左右两边<code>值</code>是否相等</strong></td>
</tr>
<tr>
<td><strong>!&#x3D;</strong></td>
<td><strong>左右值不相等</strong></td>
</tr>
<tr>
<td><strong>!&#x3D;&#x3D;</strong></td>
<td><strong>左右两边是否不全等</strong></td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span>) <span class="comment">//fasle</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">3</span>) <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">2</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较运算符有隐式转换 把&#x27;2&#x27; 转换为 2  双等号 只判断值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>) <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> === <span class="literal">null</span>) <span class="comment">//false</span></span><br><span class="line">  <span class="comment">// === 全等 判断 值 和 数据类型都一样才行</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以后判断是否相等 请用 ===  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>) <span class="comment">//fasle</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// NaN 不等于任何人，包括他自己</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> !== <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="string">&#x27;2&#x27;</span>) <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="comment">//比较字符串大小，按照字典顺序比较</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>名称</th>
<th>日常读法</th>
<th>特点</th>
<th>口诀</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>并且</td>
<td>符号两边有一个假的结果为假</td>
<td>一假则假</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
<td>或者</td>
<td>符号两边有一个真的结果为真</td>
<td>一真则真</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>取反</td>
<td>true变false  false变true</td>
<td>真变假，假变真</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>A &amp;&amp; B</th>
<th>A || B</th>
<th>!A</th>
</tr>
</thead>
<tbody><tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 逻辑与 一假则假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>) <span class="comment">//遇到第一个条件为真仍会判断第二个条件的真伪，若第二个条件为假，整体为假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>)  <span class="comment">//遇到第一个条件为假，停止判断，整体为假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">2</span>) </span><br><span class="line"><span class="comment">//在逻辑与的运算中，遇到假即停止判断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑或 一真则真</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>) <span class="comment">//遇到第一个真即停止判断第二个条件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">true</span>) <span class="comment">//遇到第一个为假仍会判断第二个条件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>)</span><br><span class="line"><span class="comment">//在逻辑或的运算中，遇到真即停止判断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑非  取反</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>) <span class="comment">//真变假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>) <span class="comment">//假变真</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">6</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num &gt; <span class="number">5</span> &amp;&amp; num &lt; <span class="number">10</span>) <span class="comment">//true</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><blockquote>
<p>逻辑运算符优先级： ！&gt; &amp;&amp; &gt;  ||  </p>
</blockquote>
<p>JavaScript 中的运算符按照优先级进行计算，优先级高的运算符会先于优先级低的运算符进行计算。以下是 JavaScript 中常见运算符的优先级从高到低的顺序：</p>
<ol>
<li>圆括号：<code>()</code></li>
<li>成员访问：<code>. </code>、<code>[]</code></li>
<li>函数调用、对象创建：<code>()</code>、<code>new</code></li>
<li>一元运算符：<code>++</code>、<code>--</code>、<code>+</code>、<code>-</code>、<code>!</code>、<code>typeof</code>、<code>void</code>、<code>delete</code></li>
<li>乘法和除法运算符：<code>*</code>、<code>/</code>、<code>%</code></li>
<li>加法和减法运算符：<code>+</code>、<code>-</code></li>
<li>关系运算符：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>instanceof</code>、<code>in</code></li>
<li>相等性运算符：<code>==</code>、<code>!=</code>、<code>===</code>、<code>!==</code></li>
<li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code></li>
<li>条件运算符：<code>?:</code></li>
<li>赋值运算符：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li>
<li>逗号运算符：<code>,</code></li>
</ol>
<p>这只是一个大致的优先级顺序，具体的优先级可能会受到括号的影响。在编写复杂的表达式时，建议使用括号来明确运算的顺序，以避免歧义和错误。</p>
<p>以下是一个示例，演示了运算符优先级的影响：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span>; <span class="comment">// 优先计算乘法，再计算加法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = (<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span>; <span class="comment">// 使用括号明确优先级</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure>

<p>了解运算符的优先级可以帮助你编写更准确和可读的代码，确保表达式按照预期进行计算。</p>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><p>在 JavaScript 中，表达式和语句是两种不同的代码构造。</p>
<ol>
<li>表达式（Expression）是一段代码，它可以计算出一个值。表达式可以包含变量、常量、运算符和函数调用等。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>; <span class="comment">// 常量表达式</span></span><br><span class="line"><span class="keyword">const</span> y = x + <span class="number">3</span>; <span class="comment">// 运算表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 输出：8</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，<code>x</code> 是一个常量表达式，<code>x + 3</code> 是一个运算表达式，它将计算出一个值并赋给变量 <code>y</code>。</p>
<ol start="2">
<li>语句（Statement）是一段代码，它执行一个动作或操作。语句通常会改变程序的状态或执行一些操作，例如赋值、条件判断、循环等。例如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 声明语句</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">3</span>) &#123; <span class="comment">// 条件语句</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x is greater than 3&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，<code>let x = 5;</code> 是一个声明语句，它声明了一个变量 <code>x</code> 并赋予初始值 5。<code>if</code> 语句是一个条件语句，它根据条件判断是否执行其中的代码块。</p>
<p>需要注意的是，JavaScript 中的大部分语句都可以包含表达式，这些表达式会被求值，但并不一定会产生一个有意义的结果。例如，赋值语句 <code>x = 5</code> 本身就是一个表达式，它的值是被赋予的值 5，但这个值通常被忽略。</p>
<p>总结起来，表达式是一段代码，它可以计算出一个值，而语句是一段代码，它执行一个动作或操作。理解表达式和语句的区别对于编写和理解 JavaScript 代码非常重要。</p>
<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p>
<p>分支语句包含：</p>
<ol>
<li>if分支语句（重点）</li>
<li>三元运算符</li>
<li>switch语句</li>
</ol>
<h3 id="if-分支语句"><a href="#if-分支语句" class="headerlink" title="if 分支语句"></a>if 分支语句</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码</p>
<p>小括号内的结果若不是布尔类型时，会发生隐式类型转换为布尔值，类似Boolean()</p>
<p>如果大括号只有一个语句，大括号可以省略，但是，建议依然带上，使代码的可读性提高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 单分支语句</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (<span class="number">3</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//  除了0 所有的数字都为真</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 除了 &#x27;&#x27;(空字符串) 所有的字符串都为真 true</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="string">&#x27;入门JavaScript&#x27;</span>) &#123;   <span class="comment">//true</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span>) &#123;    <span class="comment">//fasle</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行语句&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 进行判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;恭喜入门JavaScript&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="if双分支语句"><a href="#if双分支语句" class="headerlink" title="if双分支语句"></a>if双分支语句</h3><p>如果有两个条件的时候，可以使用 if else 双分支语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">   <span class="keyword">let</span> pwd = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (uname === <span class="string">&#x27;javascript&#x27;</span> &amp;&amp; pwd === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;入门JavaScript&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="if-多分支语句"><a href="#if-多分支语句" class="headerlink" title="if 多分支语句"></a>if 多分支语句</h3><p>使用场景： 适合于有多个条件的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 1. 用户输入</span></span><br><span class="line">   <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩：&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 判断输出</span></span><br><span class="line">   <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="三元运算符（三元表达式）"><a href="#三元运算符（三元表达式）" class="headerlink" title="三元运算符（三元表达式）"></a>三元运算符（三元表达式）</h3><p><strong>使用场景</strong>： 一些简单的双分支，可以使用  三元运算符（三元表达式），写起来比 if  else双分支 更简单</p>
<p><strong>符号</strong>：? 与 : 配合使用</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> ： 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三元运算符（三元表达式）</span></span><br><span class="line"><span class="comment">// 1. 语法格式</span></span><br><span class="line"><span class="comment">// 条件 ? 表达式1 : 表达式2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 执行过程 </span></span><br><span class="line"><span class="comment">// 2.1 如果条件为真，则执行表达式1</span></span><br><span class="line"><span class="comment">// 2.2 如果条件为假，则执行表达式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 验证</span></span><br><span class="line"><span class="comment">// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">3</span> ? <span class="string">&#x27;真的&#x27;</span> : <span class="string">&#x27;假的&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 用户输入 </span></span><br><span class="line"><span class="keyword">let</span> num = +<span class="title function_">prompt</span>(<span class="string">&#x27;请您输入一个数字:&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 判断输出- 若小于10补0</span></span><br><span class="line">num = num &gt;= <span class="number">10</span> ? num : <span class="number">0</span> + num</span><br><span class="line"><span class="title function_">alert</span>(num)</span><br></pre></td></tr></table></figure>

<h3 id="switch语句（了解）"><a href="#switch语句（了解）" class="headerlink" title="switch语句（了解）"></a>switch语句（了解）</h3><p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同</p>
<p>注意：</p>
<ol>
<li>switch case语句一般用于等值判断, if适合于区间判断</li>
<li>switch case一般需要配合break关键字使用 没有break会造成case穿透</li>
<li>if 多分支语句开发要比switch更重要，使用也更多</li>
</ol>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch分支语句</span></span><br><span class="line"><span class="comment">// 1. 语法</span></span><br><span class="line"><span class="comment">// switch (表达式) &#123;</span></span><br><span class="line"><span class="comment">//   case 值1:</span></span><br><span class="line"><span class="comment">//     代码1</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   case 值2:</span></span><br><span class="line"><span class="comment">//     代码2</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">//   default:</span></span><br><span class="line"><span class="comment">//     代码n</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是1&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是2&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是3&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出switch</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有符合条件的&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 ‘我学的很棒’</p>
<p>学习路径：</p>
<ol>
<li><p>while循环</p>
</li>
<li><p>for 循环（重点）</p>
</li>
</ol>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while :  在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。</p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">   <span class="comment">// 循环体    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环: 重复执行代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 需求: 利用循环重复打印3次 &#x27;入门JavaScript&#x27;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;入门JavaScript&lt;br&gt;&#x27;</span>)</span><br><span class="line">  i++   <span class="comment">// 这里千万不要忘了变量自增否则造成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环三要素：</p>
<p>1.初始值 （经常用变量）</p>
<p>2.终止条件</p>
<p>3.变量的变化量</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 1. 变量的起始值</span></span><br><span class="line">  <span class="keyword">let</span> end = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="comment">// 2. 终止条件</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= end) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;循环三次 &lt;br&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 变量的变化量</span></span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="中止循环"><a href="#中止循环" class="headerlink" title="中止循环"></a>中止循环</h4><ol>
<li><p><code>break</code>   中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）  </p>
</li>
<li><p><code>continue</code>  中止本次循环，一般用于排除或者跳过某一个选项的时候</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">       <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">         <span class="keyword">break</span>  <span class="comment">// 退出循环</span></span><br><span class="line">      &#125;</span><br><span class="line">       i++</span><br><span class="line">     &#125; <span class="comment">//1，2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">      i++</span><br><span class="line">    &#125; <span class="comment">//1，2，4，5</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ol>
<li><p>while(true) 来构造“无限”循环，需要使用break退出循环。（常用）</p>
</li>
<li><p>for(;;) 也可以来构造“无限”循环，同样需要使用break退出循环。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. while(true) 无限循环</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> str = <span class="title function_">prompt</span>(<span class="string">&#x27;你要入门JavaScript吗？&#x27;</span>)</span><br><span class="line">   <span class="keyword">if</span> (str === <span class="string">&#x27;要&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. for(;;) 无限循环</span></span><br><span class="line"><span class="keyword">for</span> ( ; ; ) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="title function_">prompt</span>(<span class="string">&#x27;你要入门JavaScript吗？&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;要&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="综合案例-ATM存取款机"><a href="#综合案例-ATM存取款机" class="headerlink" title="综合案例-ATM存取款机"></a>综合案例-ATM存取款机</h4><p><img src="/./../images/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/atm_zhal.png" alt="atm_zhal"></p>
<p>分析：</p>
<p>①：提示输入框写到循环里面（无限循环）</p>
<p>②：用户输入4则退出循环 break</p>
<p>③：提前准备一个金额预先存储一个数额 money</p>
<p>④：根据输入不同的值，做不同的操作</p>
<p>​     (1)  取钱则是减法操作， 存钱则是加法操作，查看余额则是直接显示金额</p>
<p>​     (2) 可以使用 if else if 多分支 来执行不同的操作</p>
<p>完整代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 1. 开始循环 输入框写到 循环里面</span></span><br><span class="line">  <span class="comment">// 3. 准备一个总的金额</span></span><br><span class="line">  <span class="keyword">let</span> money = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> re = +<span class="title function_">prompt</span>(<span class="string">`</span></span><br><span class="line"><span class="string">请您选择操作：</span></span><br><span class="line"><span class="string">1.存钱</span></span><br><span class="line"><span class="string">2.取钱</span></span><br><span class="line"><span class="string">3.查看余额</span></span><br><span class="line"><span class="string">4.退出</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">  <span class="comment">// 2. 如果用户输入的 4 则退出循环， break  写到if 里面，没有写到switch里面， 因为4需要break退出循环</span></span><br><span class="line">  <span class="keyword">if</span> (re === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 根据输入做操作</span></span><br><span class="line">  <span class="keyword">switch</span> (re) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> cun = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入存款金额&#x27;</span>)</span><br><span class="line">      money = money + cun</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="keyword">let</span> qu = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入取款金额&#x27;</span>)</span><br><span class="line">      money = money - qu</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="comment">// 存钱</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`您的银行卡余额是<span class="subst">$&#123;money&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><p><code>for</code> 是 JavaScript 提供的另一种循环控制的话句，它和 <code>while</code> 只是语法上存在差异。</p>
<!-- more-->

<h4 id="for语句的基本使用"><a href="#for语句的基本使用" class="headerlink" title="for语句的基本使用"></a>for语句的基本使用</h4><ol>
<li>实现循环的 3 要素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// for(起始值; 终止条件; 变化量) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // 要重复执行的代码</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 示例：在网页中输入标题标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 起始值为 1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变化量 i++</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 终止条件 i &lt;= 6</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;h<span class="subst">$&#123;i&#125;</span>&gt;循环控制，即重复执行&lt;h<span class="subst">$&#123;i&#125;</span>&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>变化量和死循环，<code>for</code> 循环和 <code>while</code> 一样，如果不合理设置增量和终止条件，便会产生死循环。</p>
</li>
<li><p>跳出和终止循环</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. continue </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">continue</span>  <span class="comment">// 结束本次循环，继续下一次循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//1，2，4，5</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. break</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>  <span class="comment">// 退出结束整个循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//1，2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结论：</p>
<ul>
<li><code>JavaScript</code> 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的3个特征，即起始值、变化量、终止条件，做为初学者应着重体会这3个特征，不必过多纠结三种语句的区别。</li>
<li>起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。</li>
<li>当如果明确了循环的次数的时候推荐使用<code>for</code>循环,当不明确循环的次数的时候推荐使用<code>while</code>循环</li>
</ul>
<blockquote>
<p>注意：<code>for</code> 的语法结构更简洁，故 <code>for</code> 循环的使用频次会更多。</p>
</blockquote>
<h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>在 JavaScript 中，循环嵌套是指在一个循环内部再嵌套另一个循环。通过循环嵌套，可以实现对多维数据结构的遍历和处理，或者执行复杂的循环逻辑。</p>
<p>常见的循环嵌套有两种形式：嵌套的 for 循环和嵌套的 while 循环。</p>
<ol>
<li>嵌套的 for 循环：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，外层的 for 循环控制变量 <code>i</code> 的值从 0 到 2，内层的 for 循环控制变量 <code>j</code> 的值从 0 到 2。通过循环嵌套，可以依次输出所有可能的组合 <code>(i, j)</code>。</p>
<ol start="2">
<li>嵌套的 while 循环：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, j);</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，外层的 while 循环使用变量 <code>i</code> 控制循环次数，内层的 while 循环使用变量 <code>j</code> 控制循环次数。通过循环嵌套，同样可以输出所有可能的组合 <code>(i, j)</code>。</p>
<p>需要注意的是，循环嵌套可能会导致性能问题，特别是当嵌套的循环次数很大时。在编写循环嵌套时，应该尽量避免不必要的嵌套，并考虑优化循环逻辑，以提高代码的效率。</p>
<p>另外，循环嵌套还可以与条件语句结合使用，以实现更复杂的逻辑。例如，可以在内层循环中使用条件语句来控制循环的终止条件或跳出循环的情况。</p>
<h4 id="eg1-倒三角"><a href="#eg1-倒三角" class="headerlink" title="eg1: 倒三角"></a>eg1: 倒三角</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;★&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="/./../images/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/down_star.png" alt="down_star"></p>
<h4 id="eg2-九九乘法表"><a href="#eg2-九九乘法表" class="headerlink" title="eg2: 九九乘法表"></a>eg2: 九九乘法表</h4><p>样式css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javascript :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">// 只需要吧 ★ 换成  1 x 1 = 1   </span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt; <span class="subst">$&#123;j&#125;</span> x <span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;j * i&#125;</span> &lt;/div&gt;</span></span><br><span class="line"><span class="string">     `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/./../images/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/9x9chengfabiao.png" alt="64791873467"></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组是什么？"><a href="#数组是什么？" class="headerlink" title="数组是什么？"></a>数组是什么？</h2><p><strong>数组：</strong>(Array)是一种可以按顺序保存数据的数据类型</p>
<p><strong>使用场景：</strong>如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便</p>
<h2 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h2><h3 id="定义数组和数组单元"><a href="#定义数组和数组单元" class="headerlink" title="定义数组和数组单元"></a>定义数组和数组单元</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let classes = [];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 定义非空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p>
<h3 id="访问数组和数组索引"><a href="#访问数组和数组索引" class="headerlink" title="访问数组和数组索引"></a>访问数组和数组索引</h3><p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p>
<p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p>
<p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从<code> 0</code> 开始的，如下图所示：</p>
<p><img src="/./../images/JavaScript%E5%85%A5%E9%97%A8-2/array.jpg" alt="array"></p>
<p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 访问数组，语法格式为：变量名[索引值]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">0</span>]) <span class="comment">// 结果为：小明</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">1</span>]) <span class="comment">// 结果为：小刚</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">4</span>]) <span class="comment">// 结果为：小米</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过索引值还可以为数组单重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">3</span>]) <span class="comment">// 结果为：小丽</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 重新为索引值为 3 的单元赋值</span></span></span><br><span class="line"><span class="language-javascript">  classes[<span class="number">3</span>] = <span class="string">&#x27;小小丽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">wirte</span>(classes[<span class="number">3</span>]); <span class="comment">// 结果为： 小小丽</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据单元值类型"><a href="#数据单元值类型" class="headerlink" title="数据单元值类型"></a>数据单元值类型</h3><p>数组做为数据的集合，它的单元值可以是任意数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 6. 数组单值类型可以是任意数据类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a) 数组单元值的类型为字符类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// b) 数组单元值的类型为数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> scores = [<span class="number">78</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">62</span>, <span class="number">75</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// c) 混合多种类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> mixin = [<span class="literal">true</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;hello&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数组长度属性"><a href="#数组长度属性" class="headerlink" title="数组长度属性"></a>数组长度属性</h3><p>重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 数组对应着一个 length 属性，它的含义是获取数组的长度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p>
<ol>
<li><code>push()</code> 动态向数组的尾部添加一个单元</li>
<li><code>unshit()</code> 动态向数组头部添加一个单元</li>
<li><code>pop()</code> 删除最后一个单元</li>
<li><code>shift()</code> 删除第一个单元</li>
<li><code>splice()</code> 动态删除任意单元</li>
</ol>
<p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. push 动态向数组的尾部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. unshit 动态向数组头部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. splice 动态删除任意单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 4. pop 删除最后一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 5. shift 删除第一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">shift</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。</p>
<h2 id="声明（定义）"><a href="#声明（定义）" class="headerlink" title="声明（定义）"></a>声明（定义）</h2><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分</p>
<p><img src="/./../images/JavaScript%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/function.jpg" alt="function"></p>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript  - 声明和调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数名()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复被调用，多少次都可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义，遵循小驼峰写法</p>
</blockquote>
<p>小案例： 小星星</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 函数声明</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// document.write(&#x27;hai~&#x27;)</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`**&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`***&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*****&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*******&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`********&lt;br&gt;`</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*********&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 函数调用</span></span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">        <span class="title function_">sayHi</span>()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="comment">//函数被调用了五次，会出现五组</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p>
<p>声明（定义）一个功能为打招呼的函数</p>
<ul>
<li>传入数据列表</li>
<li>声明这个函数需要传入几个数据</li>
<li>多个数据用逗号隔开</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个功能为打招呼的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sayHi() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;嗨~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sayHi()</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个函数似乎没有什么价值，除非能够向不同的人打招呼</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这就需要借助参数来实现了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数 name 可以被理解成是一个变量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>)<span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <code>,</code> 分隔</li>
<li>调用函数传递的实参要与形参的顺序一致</li>
</ol>
<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p>
<p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p>
<p>形参可以理解为是在这个函数内声明的变量（比如 num1 &#x3D; 10）实参可以理解为是给这个变量赋值</p>
<p>开发中尽量保持形参和实参个数一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个计算任意两数字和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 形参 x 和 y 分别表示任意两个数字，它们是两个变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，传入两个具体的数字做为实参</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 10 赋值给了形参 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 5  赋值给了形参 y</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">count</span>(<span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 结果为 15</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 函数返回值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义求和函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> s = a + b</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// s 即为 a + b 的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过 return 将 s 传递到外部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，如果一个函数有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 那么可将这个返回值赋值给外部的任意变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>在函数体中使用return 关键字能将内部的执行结果交给函数外部使用</li>
<li>函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的数据不要换行写</li>
<li>return会立即结束当前函数</li>
<li><strong>函数可以没有return，这种情况默认返回值为 undefined</strong></li>
</ol>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>
<p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
<p>处于全局作用域内的变量，称为全局变量</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p>
<p>处于局部作用域内的变量称为局部变量</p>
<blockquote>
<p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p>
<p>但是有一种情况，函数内部的形参可以看做是局部变量。</p>
</blockquote>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>函数可以分为具名函数和匿名函数</p>
<p>在 JavaScript 中，匿名函数是一种没有名称的函数，也被称为“无名函数”或“函数表达式”。与具名函数相比，匿名函数没有一个标识符来引用它，因此它通常用作一次性或临时的函数。</p>
<p>匿名函数可以通过以下两种方式来定义：</p>
<ol>
<li><p>函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHello = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，我们使用 <code>function</code> 关键字定义了一个匿名函数，并将其赋值给变量 <code>sayHello</code>。通过变量 <code>sayHello</code>，我们可以调用这个匿名函数。</p>
</li>
<li><p>箭头函数表达式（ES6+）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sayHello</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，我们使用箭头函数的语法定义了一个匿名函数，并将其赋值给变量 <code>sayHello</code>。箭头函数提供了一种更简洁的语法形式来定义匿名函数。</p>
</li>
</ol>
<p>匿名函数可以像具名函数一样被调用，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure>

<p>匿名函数通常用于以下情况：</p>
<ul>
<li>作为回调函数传递给其他函数。</li>
<li>在立即执行函数表达式（IIFE）中使用，以创建一个局部作用域。</li>
<li>在某些情况下，可以提高代码的可读性和可维护性。</li>
</ul>
<p>需要注意的是，虽然匿名函数没有名称，但仍然可以通过变量来引用和调用它。此外，匿名函数也可以接受参数，并在函数体中使用这些参数进行逻辑处理。</p>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>立即执行函数（Immediately Invoked Function Expression，IIFE）是一种在定义后立即执行的函数，它在 JavaScript 中常用于创建一个独立的作用域，避免变量污染和全局命名冲突。</p>
<p>IIFE 的语法形式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们使用函数表达式来定义一个匿名函数，并紧接着使用 <code>()</code> 将其包裹起来。最后的 <code>()</code> 是立即调用函数的语法，它会立即执行函数体。</p>
<p>IIFE 可以带有参数，并在函数体中使用这些参数进行逻辑处理，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;)(<span class="string">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们定义了一个带有参数 <code>name</code> 的立即执行函数，并在函数体中将参数 <code>name</code> 与字符串拼接后输出。</p>
<p>IIFE 的主要作用是创建一个独立的作用域，其中的变量在函数执行后会被销毁，不会污染全局命名空间。这在处理模块化、封装代码和避免命名冲突等方面非常有用。</p>
<p>此外，IIFE 还可以用于模块模式、闭包和函数作为参数的情况下。例如，可以将 IIFE 用作模块的封装器，将私有变量和方法隐藏在函数作用域内，只暴露需要的公共接口。</p>
<p>需要注意的是，在使用 IIFE 时，函数体内的变量是无法从外部访问的，除非通过返回值或闭包的方式将其暴露出来。</p>
<blockquote>
<p>无需调用，立即执行，其实本质已经调用了</p>
<p>多个立即执行函数之间用分号隔开</p>
</blockquote>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><blockquote>
<p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>声明一个对象类型的变量与之前声明一个数值或字符串类型的变量没有本质上的区别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明字符串类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明数值类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">199</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明对象类型变量，使用一对花括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user 便是一个对象了，目前它是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性和访问"><a href="#属性和访问" class="headerlink" title="属性和访问"></a>属性和访问</h2><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p>
<ol>
<li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>属性就是依附在对象上的变量</li>
<li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值，我称之为属性访问。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人性别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 结果为 男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的身高</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;stature&#x27;</span>]) <span class="comment">// 结果为 185</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 或者</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">stature</span>) <span class="comment">// 结果同为 185</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展：也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript- 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加与直接定义是一样的，只是语法上更灵活</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="方法和调用"><a href="#方法和调用" class="headerlink" title="方法和调用"></a>方法和调用</h2><p>在 JavaScript 中，方法是对象的属性，它是一个包含函数定义的属性。方法可以通过对象来调用，以执行相应的操作。</p>
<p>下面是一个示例，展示如何定义一个对象的方法，并进行调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的方法</span></span><br><span class="line">person.<span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, my name is John.&quot;</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们定义了一个名为 <code>person</code> 的对象，其中包含了一个名为 <code>sayHello</code> 的方法。该方法使用 <code>function</code> 关键字定义，并通过 <code>this</code> 关键字引用了对象自身的属性。</p>
<p>要调用对象的方法，可以使用对象名加上方法名，并使用 <code>()</code> 运算符来执行方法。在调用方法时，方法体中的 <code>this</code> 关键字会自动指向调用该方法的对象。</p>
<p>需要注意的是，方法可以访问对象的其他属性，并在方法体中使用它们。在上面的示例中，<code>sayHello</code> 方法使用了对象的 <code>name</code> 属性。</p>
<p>此外，还可以通过以下两种方式来定义对象的方法：</p>
<ol>
<li><p>使用对象字面量的简写语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用了对象字面量的简写语法来定义对象的方法。</p>
</li>
<li><p>使用 ES6 的箭头函数（不推荐）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用箭头函数来定义对象的方法。需要注意的是，箭头函数中的 <code>this</code> 关键字不会指向对象本身，而是指向定义时的上下文。</p>
</li>
</ol>
<p>总结来说，JavaScript 中的方法是对象的属性，它包含了一个函数定义，并通过对象来调用执行。方法可以访问对象的其他属性，并在方法体中使用它们。方法的定义方式有多种，包括使用 <code>function</code> 关键字、对象字面量的简写语法和箭头函数（不推荐）。</p>
<p>换一种方式理解，数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p>
<ol>
<li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li>
<li>多个属性之间使用英文 <code>,</code> 分隔</li>
<li>方法是依附在对象中的函数</li>
<li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;入门JavaScript！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 或 <code>[]</code> 调用对象中函数，我称之为方法调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;入门JavaScript!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中 singing 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">singing</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中的 run 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">run</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>扩展：也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性，也没有任何方法）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p>
<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p>
<h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// key是属性名，是字符串类型且带引号    </span></span><br><span class="line">    <span class="comment">// key ===  &#x27;uname&#x27;</span></span><br><span class="line">    <span class="comment">// 使用obj[k]可获得属性值</span></span><br><span class="line">    <span class="comment">// obj[k] === obj[&#x27;uname&#x27;] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>for in 不提倡遍历数组 因为 k 是 字符串</strong>  </p>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code>。</p>
<p>除了 <code>console</code> 对象外，JavaScript 还有其它的内置的对象</p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul>
<li>Math.PI，获取圆周率</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>Math.random，生成 0 到 1 间的随机数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 ~ 1 之间的随机数, 包含 0 不包含 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.ceil，数字向上取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分加1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.4</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.floor，数字向下取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分不变</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.68</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.round，四舍五入取整</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取整，四舍五入原则</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.46539</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.849</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.max，在一组数中找出最大的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.min，在一组数中找出最小的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">24</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">21</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Math.pow，幂方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某个数的多少次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// 求 4 的 2 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 求 2 的 3 次方</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Math.sqrt，平方根</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求某数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
